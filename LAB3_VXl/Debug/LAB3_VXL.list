
LAB3_VXL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b38  08002b38  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b38  08002b38  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b38  08002b38  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b38  08002b38  00012b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b3c  08002b3c  00012b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  2000001c  08002b5c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08002b5c  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096e6  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5e  00000000  00000000  0002972b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002b290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016aae  00000000  00000000  0002c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b3a1  00000000  00000000  0004306e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082406  00000000  00000000  0004e40f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0815  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027cc  00000000  00000000  000d0868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002afc 	.word	0x08002afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	08002afc 	.word	0x08002afc

0800014c <SystemFSM>:

int default_redlight;
int default_yellowlight;
int default_greenlight;

void SystemFSM(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status){
 8000150:	4b93      	ldr	r3, [pc, #588]	; (80003a0 <SystemFSM+0x254>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b04      	cmp	r3, #4
 8000156:	f200 82cd 	bhi.w	80006f4 <SystemFSM+0x5a8>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <SystemFSM+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000175 	.word	0x08000175
 8000164:	080001eb 	.word	0x080001eb
 8000168:	08000233 	.word	0x08000233
 800016c:	080003e5 	.word	0x080003e5
 8000170:	08000553 	.word	0x08000553
		case INIT:
			if(is_button_pressed(0)){
 8000174:	2000      	movs	r0, #0
 8000176:	f000 fccd 	bl	8000b14 <is_button_pressed>
 800017a:	4603      	mov	r3, r0
 800017c:	2b00      	cmp	r3, #0
 800017e:	d002      	beq.n	8000186 <SystemFSM+0x3a>
				button1_press = 1;
 8000180:	4b88      	ldr	r3, [pc, #544]	; (80003a4 <SystemFSM+0x258>)
 8000182:	2201      	movs	r2, #1
 8000184:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000186:	2000      	movs	r0, #0
 8000188:	f000 fcc4 	bl	8000b14 <is_button_pressed>
 800018c:	4603      	mov	r3, r0
 800018e:	2b00      	cmp	r3, #0
 8000190:	f040 82b2 	bne.w	80006f8 <SystemFSM+0x5ac>
 8000194:	4b83      	ldr	r3, [pc, #524]	; (80003a4 <SystemFSM+0x258>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	2b00      	cmp	r3, #0
 800019a:	f000 82ad 	beq.w	80006f8 <SystemFSM+0x5ac>
				status = MODE1_NORMAL;
 800019e:	4b80      	ldr	r3, [pc, #512]	; (80003a0 <SystemFSM+0x254>)
 80001a0:	2201      	movs	r2, #1
 80001a2:	601a      	str	r2, [r3, #0]
				setTimer(100, 0);
 80001a4:	2100      	movs	r1, #0
 80001a6:	2064      	movs	r0, #100	; 0x64
 80001a8:	f001 f89e 	bl	80012e8 <setTimer>
				setTimer(100, 1);
 80001ac:	2101      	movs	r1, #1
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f001 f89a 	bl	80012e8 <setTimer>
				// set default status for traffic light fsm
				TL1 = RED;
 80001b4:	4b7c      	ldr	r3, [pc, #496]	; (80003a8 <SystemFSM+0x25c>)
 80001b6:	2202      	movs	r2, #2
 80001b8:	601a      	str	r2, [r3, #0]
				TL2 = GREEN;
 80001ba:	4b7c      	ldr	r3, [pc, #496]	; (80003ac <SystemFSM+0x260>)
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]

				// set default value time for traffic light fsm
				default_redlight = redlight;
 80001c0:	4b7b      	ldr	r3, [pc, #492]	; (80003b0 <SystemFSM+0x264>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	4a7b      	ldr	r2, [pc, #492]	; (80003b4 <SystemFSM+0x268>)
 80001c6:	6013      	str	r3, [r2, #0]
				default_yellowlight = yellowlight;
 80001c8:	4b7b      	ldr	r3, [pc, #492]	; (80003b8 <SystemFSM+0x26c>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a7b      	ldr	r2, [pc, #492]	; (80003bc <SystemFSM+0x270>)
 80001ce:	6013      	str	r3, [r2, #0]
				default_greenlight = greenlight;
 80001d0:	4b7b      	ldr	r3, [pc, #492]	; (80003c0 <SystemFSM+0x274>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a7b      	ldr	r2, [pc, #492]	; (80003c4 <SystemFSM+0x278>)
 80001d6:	6013      	str	r3, [r2, #0]

				Red1 = default_redlight;
 80001d8:	4b76      	ldr	r3, [pc, #472]	; (80003b4 <SystemFSM+0x268>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a7a      	ldr	r2, [pc, #488]	; (80003c8 <SystemFSM+0x27c>)
 80001de:	6013      	str	r3, [r2, #0]
				Green2 = default_greenlight;
 80001e0:	4b78      	ldr	r3, [pc, #480]	; (80003c4 <SystemFSM+0x278>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a79      	ldr	r2, [pc, #484]	; (80003cc <SystemFSM+0x280>)
 80001e6:	6013      	str	r3, [r2, #0]
			}
			break;
 80001e8:	e286      	b.n	80006f8 <SystemFSM+0x5ac>
		case MODE1_NORMAL:
			TrafficLightFSM1();
 80001ea:	f000 fa91 	bl	8000710 <TrafficLightFSM1>
			TrafficLightFSM2();
 80001ee:	f000 fb43 	bl	8000878 <TrafficLightFSM2>
			// press and release
			if(is_button_pressed(0)){
 80001f2:	2000      	movs	r0, #0
 80001f4:	f000 fc8e 	bl	8000b14 <is_button_pressed>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d002      	beq.n	8000204 <SystemFSM+0xb8>
				button1_press = 1;
 80001fe:	4b69      	ldr	r3, [pc, #420]	; (80003a4 <SystemFSM+0x258>)
 8000200:	2201      	movs	r2, #1
 8000202:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000204:	2000      	movs	r0, #0
 8000206:	f000 fc85 	bl	8000b14 <is_button_pressed>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	f040 8275 	bne.w	80006fc <SystemFSM+0x5b0>
 8000212:	4b64      	ldr	r3, [pc, #400]	; (80003a4 <SystemFSM+0x258>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	f000 8270 	beq.w	80006fc <SystemFSM+0x5b0>
				status = MODE2_MANRED;
 800021c:	4b60      	ldr	r3, [pc, #384]	; (80003a0 <SystemFSM+0x254>)
 800021e:	2202      	movs	r2, #2
 8000220:	601a      	str	r2, [r3, #0]
				setTimer(50, 3);
 8000222:	2103      	movs	r1, #3
 8000224:	2032      	movs	r0, #50	; 0x32
 8000226:	f001 f85f 	bl	80012e8 <setTimer>
				button1_press = 0;
 800022a:	4b5e      	ldr	r3, [pc, #376]	; (80003a4 <SystemFSM+0x258>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000230:	e264      	b.n	80006fc <SystemFSM+0x5b0>
		case MODE2_MANRED:
			// red led blinking 2HZ
			if(flag[3] == 1){
 8000232:	4b67      	ldr	r3, [pc, #412]	; (80003d0 <SystemFSM+0x284>)
 8000234:	68db      	ldr	r3, [r3, #12]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d10c      	bne.n	8000254 <SystemFSM+0x108>
				setTimer(50, 3);
 800023a:	2103      	movs	r1, #3
 800023c:	2032      	movs	r0, #50	; 0x32
 800023e:	f001 f853 	bl	80012e8 <setTimer>
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	4863      	ldr	r0, [pc, #396]	; (80003d4 <SystemFSM+0x288>)
 8000246:	f001 fc5c 	bl	8001b02 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 800024a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800024e:	4861      	ldr	r0, [pc, #388]	; (80003d4 <SystemFSM+0x288>)
 8000250:	f001 fc57 	bl	8001b02 <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(redlight, 1);
 8000254:	4b56      	ldr	r3, [pc, #344]	; (80003b0 <SystemFSM+0x264>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2101      	movs	r1, #1
 800025a:	4618      	mov	r0, r3
 800025c:	f000 ff80 	bl	8001160 <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE2_MANRED, 2);
 8000260:	2102      	movs	r1, #2
 8000262:	2002      	movs	r0, #2
 8000264:	f000 ff7c 	bl	8001160 <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 8000268:	2001      	movs	r0, #1
 800026a:	f000 fc53 	bl	8000b14 <is_button_pressed>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d002      	beq.n	800027a <SystemFSM+0x12e>
				button2_press = 1;
 8000274:	4b58      	ldr	r3, [pc, #352]	; (80003d8 <SystemFSM+0x28c>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 800027a:	2001      	movs	r0, #1
 800027c:	f000 fc4a 	bl	8000b14 <is_button_pressed>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d10b      	bne.n	800029e <SystemFSM+0x152>
 8000286:	4b54      	ldr	r3, [pc, #336]	; (80003d8 <SystemFSM+0x28c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d007      	beq.n	800029e <SystemFSM+0x152>
				redlight++;
 800028e:	4b48      	ldr	r3, [pc, #288]	; (80003b0 <SystemFSM+0x264>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	4a46      	ldr	r2, [pc, #280]	; (80003b0 <SystemFSM+0x264>)
 8000296:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 8000298:	4b4f      	ldr	r3, [pc, #316]	; (80003d8 <SystemFSM+0x28c>)
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 800029e:	2001      	movs	r0, #1
 80002a0:	f000 fc52 	bl	8000b48 <is_button_pressed_1s>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d017      	beq.n	80002da <SystemFSM+0x18e>
				if(button2_first_press1s){
 80002aa:	4b4c      	ldr	r3, [pc, #304]	; (80003dc <SystemFSM+0x290>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d006      	beq.n	80002c0 <SystemFSM+0x174>
					setTimer(50, 4);
 80002b2:	2104      	movs	r1, #4
 80002b4:	2032      	movs	r0, #50	; 0x32
 80002b6:	f001 f817 	bl	80012e8 <setTimer>
					button2_first_press1s = 0;
 80002ba:	4b48      	ldr	r3, [pc, #288]	; (80003dc <SystemFSM+0x290>)
 80002bc:	2200      	movs	r2, #0
 80002be:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 80002c0:	4b43      	ldr	r3, [pc, #268]	; (80003d0 <SystemFSM+0x284>)
 80002c2:	691b      	ldr	r3, [r3, #16]
 80002c4:	2b01      	cmp	r3, #1
 80002c6:	d108      	bne.n	80002da <SystemFSM+0x18e>
					setTimer(50, 4);
 80002c8:	2104      	movs	r1, #4
 80002ca:	2032      	movs	r0, #50	; 0x32
 80002cc:	f001 f80c 	bl	80012e8 <setTimer>
					redlight++;
 80002d0:	4b37      	ldr	r3, [pc, #220]	; (80003b0 <SystemFSM+0x264>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3301      	adds	r3, #1
 80002d6:	4a36      	ldr	r2, [pc, #216]	; (80003b0 <SystemFSM+0x264>)
 80002d8:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 80002da:	2002      	movs	r0, #2
 80002dc:	f000 fc1a 	bl	8000b14 <is_button_pressed>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d002      	beq.n	80002ec <SystemFSM+0x1a0>
				button3_press = 1;
 80002e6:	4b3e      	ldr	r3, [pc, #248]	; (80003e0 <SystemFSM+0x294>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 80002ec:	2002      	movs	r0, #2
 80002ee:	f000 fc11 	bl	8000b14 <is_button_pressed>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d128      	bne.n	800034a <SystemFSM+0x1fe>
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemFSM+0x294>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d024      	beq.n	800034a <SystemFSM+0x1fe>
				status = MODE1_NORMAL;
 8000300:	4b27      	ldr	r3, [pc, #156]	; (80003a0 <SystemFSM+0x254>)
 8000302:	2201      	movs	r2, #1
 8000304:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000306:	2100      	movs	r1, #0
 8000308:	2064      	movs	r0, #100	; 0x64
 800030a:	f000 ffed 	bl	80012e8 <setTimer>
				setTimer(100, 1);
 800030e:	2101      	movs	r1, #1
 8000310:	2064      	movs	r0, #100	; 0x64
 8000312:	f000 ffe9 	bl	80012e8 <setTimer>

				redlight = default_redlight;
 8000316:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <SystemFSM+0x268>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a25      	ldr	r2, [pc, #148]	; (80003b0 <SystemFSM+0x264>)
 800031c:	6013      	str	r3, [r2, #0]
				yellowlight = default_yellowlight;
 800031e:	4b27      	ldr	r3, [pc, #156]	; (80003bc <SystemFSM+0x270>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a25      	ldr	r2, [pc, #148]	; (80003b8 <SystemFSM+0x26c>)
 8000324:	6013      	str	r3, [r2, #0]
				greenlight = default_greenlight;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <SystemFSM+0x278>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a25      	ldr	r2, [pc, #148]	; (80003c0 <SystemFSM+0x274>)
 800032c:	6013      	str	r3, [r2, #0]

				// turn off traffic light
				HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2140      	movs	r1, #64	; 0x40
 8000332:	4828      	ldr	r0, [pc, #160]	; (80003d4 <SystemFSM+0x288>)
 8000334:	f001 fbcd 	bl	8001ad2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800033e:	4825      	ldr	r0, [pc, #148]	; (80003d4 <SystemFSM+0x288>)
 8000340:	f001 fbc7 	bl	8001ad2 <HAL_GPIO_WritePin>
				button3_press = 0;
 8000344:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemFSM+0x294>)
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 800034a:	2000      	movs	r0, #0
 800034c:	f000 fbe2 	bl	8000b14 <is_button_pressed>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d002      	beq.n	800035c <SystemFSM+0x210>
				button1_press = 1;
 8000356:	4b13      	ldr	r3, [pc, #76]	; (80003a4 <SystemFSM+0x258>)
 8000358:	2201      	movs	r2, #1
 800035a:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 800035c:	2000      	movs	r0, #0
 800035e:	f000 fbd9 	bl	8000b14 <is_button_pressed>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	f040 81cb 	bne.w	8000700 <SystemFSM+0x5b4>
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <SystemFSM+0x258>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	f000 81c6 	beq.w	8000700 <SystemFSM+0x5b4>
				status = MODE3_MANYELLOW;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <SystemFSM+0x254>)
 8000376:	2203      	movs	r2, #3
 8000378:	601a      	str	r2, [r3, #0]
				// set timer for blinking led
				setTimer(50, 3);
 800037a:	2103      	movs	r1, #3
 800037c:	2032      	movs	r0, #50	; 0x32
 800037e:	f000 ffb3 	bl	80012e8 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8000382:	2201      	movs	r2, #1
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	4813      	ldr	r0, [pc, #76]	; (80003d4 <SystemFSM+0x288>)
 8000388:	f001 fba3 	bl	8001ad2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000392:	4810      	ldr	r0, [pc, #64]	; (80003d4 <SystemFSM+0x288>)
 8000394:	f001 fb9d 	bl	8001ad2 <HAL_GPIO_WritePin>
				button1_press = 0;
 8000398:	4b02      	ldr	r3, [pc, #8]	; (80003a4 <SystemFSM+0x258>)
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
			}
			break;
 800039e:	e1af      	b.n	8000700 <SystemFSM+0x5b4>
 80003a0:	20000048 	.word	0x20000048
 80003a4:	2000003c 	.word	0x2000003c
 80003a8:	20000070 	.word	0x20000070
 80003ac:	2000008c 	.word	0x2000008c
 80003b0:	20000000 	.word	0x20000000
 80003b4:	20000064 	.word	0x20000064
 80003b8:	20000008 	.word	0x20000008
 80003bc:	2000006c 	.word	0x2000006c
 80003c0:	20000004 	.word	0x20000004
 80003c4:	20000068 	.word	0x20000068
 80003c8:	20000088 	.word	0x20000088
 80003cc:	20000078 	.word	0x20000078
 80003d0:	200000e8 	.word	0x200000e8
 80003d4:	40010800 	.word	0x40010800
 80003d8:	20000040 	.word	0x20000040
 80003dc:	2000000c 	.word	0x2000000c
 80003e0:	20000044 	.word	0x20000044
		case MODE3_MANYELLOW:
			// yellow led blinking 2HZ
			if(flag[3] == 1){
 80003e4:	4bb6      	ldr	r3, [pc, #728]	; (80006c0 <SystemFSM+0x574>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d10c      	bne.n	8000406 <SystemFSM+0x2ba>
				setTimer(50, 3);
 80003ec:	2103      	movs	r1, #3
 80003ee:	2032      	movs	r0, #50	; 0x32
 80003f0:	f000 ff7a 	bl	80012e8 <setTimer>
				HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80003f4:	2120      	movs	r1, #32
 80003f6:	48b3      	ldr	r0, [pc, #716]	; (80006c4 <SystemFSM+0x578>)
 80003f8:	f001 fb83 	bl	8001b02 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 80003fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000400:	48b0      	ldr	r0, [pc, #704]	; (80006c4 <SystemFSM+0x578>)
 8000402:	f001 fb7e 	bl	8001b02 <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(yellowlight, 1);
 8000406:	4bb0      	ldr	r3, [pc, #704]	; (80006c8 <SystemFSM+0x57c>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2101      	movs	r1, #1
 800040c:	4618      	mov	r0, r3
 800040e:	f000 fea7 	bl	8001160 <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE3_MANYELLOW, 2);
 8000412:	2102      	movs	r1, #2
 8000414:	2003      	movs	r0, #3
 8000416:	f000 fea3 	bl	8001160 <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fb7a 	bl	8000b14 <is_button_pressed>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <SystemFSM+0x2e0>
				button2_press = 1;
 8000426:	4ba9      	ldr	r3, [pc, #676]	; (80006cc <SystemFSM+0x580>)
 8000428:	2201      	movs	r2, #1
 800042a:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 800042c:	2001      	movs	r0, #1
 800042e:	f000 fb71 	bl	8000b14 <is_button_pressed>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10b      	bne.n	8000450 <SystemFSM+0x304>
 8000438:	4ba4      	ldr	r3, [pc, #656]	; (80006cc <SystemFSM+0x580>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d007      	beq.n	8000450 <SystemFSM+0x304>
				yellowlight++;
 8000440:	4ba1      	ldr	r3, [pc, #644]	; (80006c8 <SystemFSM+0x57c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	4aa0      	ldr	r2, [pc, #640]	; (80006c8 <SystemFSM+0x57c>)
 8000448:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 800044a:	4ba0      	ldr	r3, [pc, #640]	; (80006cc <SystemFSM+0x580>)
 800044c:	2200      	movs	r2, #0
 800044e:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 8000450:	2001      	movs	r0, #1
 8000452:	f000 fb79 	bl	8000b48 <is_button_pressed_1s>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d017      	beq.n	800048c <SystemFSM+0x340>
				if(button2_first_press1s){
 800045c:	4b9c      	ldr	r3, [pc, #624]	; (80006d0 <SystemFSM+0x584>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d006      	beq.n	8000472 <SystemFSM+0x326>
					setTimer(50, 4);
 8000464:	2104      	movs	r1, #4
 8000466:	2032      	movs	r0, #50	; 0x32
 8000468:	f000 ff3e 	bl	80012e8 <setTimer>
					button2_first_press1s = 0;
 800046c:	4b98      	ldr	r3, [pc, #608]	; (80006d0 <SystemFSM+0x584>)
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 8000472:	4b93      	ldr	r3, [pc, #588]	; (80006c0 <SystemFSM+0x574>)
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	2b01      	cmp	r3, #1
 8000478:	d108      	bne.n	800048c <SystemFSM+0x340>
					setTimer(50, 4);
 800047a:	2104      	movs	r1, #4
 800047c:	2032      	movs	r0, #50	; 0x32
 800047e:	f000 ff33 	bl	80012e8 <setTimer>
					yellowlight++;
 8000482:	4b91      	ldr	r3, [pc, #580]	; (80006c8 <SystemFSM+0x57c>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	3301      	adds	r3, #1
 8000488:	4a8f      	ldr	r2, [pc, #572]	; (80006c8 <SystemFSM+0x57c>)
 800048a:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 800048c:	2002      	movs	r0, #2
 800048e:	f000 fb41 	bl	8000b14 <is_button_pressed>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d002      	beq.n	800049e <SystemFSM+0x352>
				button3_press = 1;
 8000498:	4b8e      	ldr	r3, [pc, #568]	; (80006d4 <SystemFSM+0x588>)
 800049a:	2201      	movs	r2, #1
 800049c:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 800049e:	2002      	movs	r0, #2
 80004a0:	f000 fb38 	bl	8000b14 <is_button_pressed>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d128      	bne.n	80004fc <SystemFSM+0x3b0>
 80004aa:	4b8a      	ldr	r3, [pc, #552]	; (80006d4 <SystemFSM+0x588>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d024      	beq.n	80004fc <SystemFSM+0x3b0>
				status = MODE1_NORMAL;
 80004b2:	4b89      	ldr	r3, [pc, #548]	; (80006d8 <SystemFSM+0x58c>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2064      	movs	r0, #100	; 0x64
 80004bc:	f000 ff14 	bl	80012e8 <setTimer>
				setTimer(100, 1);
 80004c0:	2101      	movs	r1, #1
 80004c2:	2064      	movs	r0, #100	; 0x64
 80004c4:	f000 ff10 	bl	80012e8 <setTimer>

				redlight = default_redlight;
 80004c8:	4b84      	ldr	r3, [pc, #528]	; (80006dc <SystemFSM+0x590>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a84      	ldr	r2, [pc, #528]	; (80006e0 <SystemFSM+0x594>)
 80004ce:	6013      	str	r3, [r2, #0]
				yellowlight = default_yellowlight;
 80004d0:	4b84      	ldr	r3, [pc, #528]	; (80006e4 <SystemFSM+0x598>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a7c      	ldr	r2, [pc, #496]	; (80006c8 <SystemFSM+0x57c>)
 80004d6:	6013      	str	r3, [r2, #0]
				greenlight = default_greenlight;
 80004d8:	4b83      	ldr	r3, [pc, #524]	; (80006e8 <SystemFSM+0x59c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a83      	ldr	r2, [pc, #524]	; (80006ec <SystemFSM+0x5a0>)
 80004de:	6013      	str	r3, [r2, #0]

				// turn off traffic light
				HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2120      	movs	r1, #32
 80004e4:	4877      	ldr	r0, [pc, #476]	; (80006c4 <SystemFSM+0x578>)
 80004e6:	f001 faf4 	bl	8001ad2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f0:	4874      	ldr	r0, [pc, #464]	; (80006c4 <SystemFSM+0x578>)
 80004f2:	f001 faee 	bl	8001ad2 <HAL_GPIO_WritePin>
				button3_press = 0;
 80004f6:	4b77      	ldr	r3, [pc, #476]	; (80006d4 <SystemFSM+0x588>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fb09 	bl	8000b14 <is_button_pressed>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d002      	beq.n	800050e <SystemFSM+0x3c2>
				button1_press = 1;
 8000508:	4b79      	ldr	r3, [pc, #484]	; (80006f0 <SystemFSM+0x5a4>)
 800050a:	2201      	movs	r2, #1
 800050c:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 800050e:	2000      	movs	r0, #0
 8000510:	f000 fb00 	bl	8000b14 <is_button_pressed>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	f040 80f4 	bne.w	8000704 <SystemFSM+0x5b8>
 800051c:	4b74      	ldr	r3, [pc, #464]	; (80006f0 <SystemFSM+0x5a4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	f000 80ef 	beq.w	8000704 <SystemFSM+0x5b8>
				status = MODE4_MANGREEN;
 8000526:	4b6c      	ldr	r3, [pc, #432]	; (80006d8 <SystemFSM+0x58c>)
 8000528:	2204      	movs	r2, #4
 800052a:	601a      	str	r2, [r3, #0]
				// set timer for blinking led
				setTimer(50, 3);
 800052c:	2103      	movs	r1, #3
 800052e:	2032      	movs	r0, #50	; 0x32
 8000530:	f000 feda 	bl	80012e8 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000534:	2201      	movs	r2, #1
 8000536:	2120      	movs	r1, #32
 8000538:	4862      	ldr	r0, [pc, #392]	; (80006c4 <SystemFSM+0x578>)
 800053a:	f001 faca 	bl	8001ad2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 800053e:	2201      	movs	r2, #1
 8000540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000544:	485f      	ldr	r0, [pc, #380]	; (80006c4 <SystemFSM+0x578>)
 8000546:	f001 fac4 	bl	8001ad2 <HAL_GPIO_WritePin>
				button1_press = 0;
 800054a:	4b69      	ldr	r3, [pc, #420]	; (80006f0 <SystemFSM+0x5a4>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
			}
			break;
 8000550:	e0d8      	b.n	8000704 <SystemFSM+0x5b8>
		case MODE4_MANGREEN:
			// green led blinking 2HZ
			if(flag[3] == 1){
 8000552:	4b5b      	ldr	r3, [pc, #364]	; (80006c0 <SystemFSM+0x574>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d10b      	bne.n	8000572 <SystemFSM+0x426>
				setTimer(50, 3);
 800055a:	2103      	movs	r1, #3
 800055c:	2032      	movs	r0, #50	; 0x32
 800055e:	f000 fec3 	bl	80012e8 <setTimer>
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000562:	2110      	movs	r1, #16
 8000564:	4857      	ldr	r0, [pc, #348]	; (80006c4 <SystemFSM+0x578>)
 8000566:	f001 facc 	bl	8001b02 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	4855      	ldr	r0, [pc, #340]	; (80006c4 <SystemFSM+0x578>)
 800056e:	f001 fac8 	bl	8001b02 <HAL_GPIO_TogglePin>
			}
			// 2 7SEG display value
			Updatebuffer(greenlight, 1);
 8000572:	4b5e      	ldr	r3, [pc, #376]	; (80006ec <SystemFSM+0x5a0>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	2101      	movs	r1, #1
 8000578:	4618      	mov	r0, r3
 800057a:	f000 fdf1 	bl	8001160 <Updatebuffer>
			// 2 7SEG display mode
			Updatebuffer(MODE4_MANGREEN, 2);
 800057e:	2102      	movs	r1, #2
 8000580:	2004      	movs	r0, #4
 8000582:	f000 fded 	bl	8001160 <Updatebuffer>
			// if button2 is pressed and released after that
			// increasing value by 1
			if(is_button_pressed(1)){
 8000586:	2001      	movs	r0, #1
 8000588:	f000 fac4 	bl	8000b14 <is_button_pressed>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d002      	beq.n	8000598 <SystemFSM+0x44c>
				button2_press = 1;
 8000592:	4b4e      	ldr	r3, [pc, #312]	; (80006cc <SystemFSM+0x580>)
 8000594:	2201      	movs	r2, #1
 8000596:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(1) && button2_press){
 8000598:	2001      	movs	r0, #1
 800059a:	f000 fabb 	bl	8000b14 <is_button_pressed>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10b      	bne.n	80005bc <SystemFSM+0x470>
 80005a4:	4b49      	ldr	r3, [pc, #292]	; (80006cc <SystemFSM+0x580>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d007      	beq.n	80005bc <SystemFSM+0x470>
				greenlight++;
 80005ac:	4b4f      	ldr	r3, [pc, #316]	; (80006ec <SystemFSM+0x5a0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	3301      	adds	r3, #1
 80005b2:	4a4e      	ldr	r2, [pc, #312]	; (80006ec <SystemFSM+0x5a0>)
 80005b4:	6013      	str	r3, [r2, #0]
				button2_press = 0;
 80005b6:	4b45      	ldr	r3, [pc, #276]	; (80006cc <SystemFSM+0x580>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
			}
			// if button2 is pressed long 1s
			if(is_button_pressed_1s(1)){
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fac3 	bl	8000b48 <is_button_pressed_1s>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d017      	beq.n	80005f8 <SystemFSM+0x4ac>
				if(button2_first_press1s){
 80005c8:	4b41      	ldr	r3, [pc, #260]	; (80006d0 <SystemFSM+0x584>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <SystemFSM+0x492>
					setTimer(50, 4);
 80005d0:	2104      	movs	r1, #4
 80005d2:	2032      	movs	r0, #50	; 0x32
 80005d4:	f000 fe88 	bl	80012e8 <setTimer>
					button2_first_press1s = 0;
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemFSM+0x584>)
 80005da:	2200      	movs	r2, #0
 80005dc:	601a      	str	r2, [r3, #0]
				}
				if(flag[4] == 1){
 80005de:	4b38      	ldr	r3, [pc, #224]	; (80006c0 <SystemFSM+0x574>)
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d108      	bne.n	80005f8 <SystemFSM+0x4ac>
					setTimer(50, 4);
 80005e6:	2104      	movs	r1, #4
 80005e8:	2032      	movs	r0, #50	; 0x32
 80005ea:	f000 fe7d 	bl	80012e8 <setTimer>
					greenlight++;
 80005ee:	4b3f      	ldr	r3, [pc, #252]	; (80006ec <SystemFSM+0x5a0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	3301      	adds	r3, #1
 80005f4:	4a3d      	ldr	r2, [pc, #244]	; (80006ec <SystemFSM+0x5a0>)
 80005f6:	6013      	str	r3, [r2, #0]
				}
			}
			// if button3 is pressed, turn back to mode 1 normal
			if(is_button_pressed(2)){
 80005f8:	2002      	movs	r0, #2
 80005fa:	f000 fa8b 	bl	8000b14 <is_button_pressed>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d002      	beq.n	800060a <SystemFSM+0x4be>
				button3_press = 1;
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <SystemFSM+0x588>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(2) && button3_press){
 800060a:	2002      	movs	r0, #2
 800060c:	f000 fa82 	bl	8000b14 <is_button_pressed>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d127      	bne.n	8000666 <SystemFSM+0x51a>
 8000616:	4b2f      	ldr	r3, [pc, #188]	; (80006d4 <SystemFSM+0x588>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d023      	beq.n	8000666 <SystemFSM+0x51a>
				status = MODE1_NORMAL;
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemFSM+0x58c>)
 8000620:	2201      	movs	r2, #1
 8000622:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000624:	2100      	movs	r1, #0
 8000626:	2064      	movs	r0, #100	; 0x64
 8000628:	f000 fe5e 	bl	80012e8 <setTimer>
				setTimer(100, 1);
 800062c:	2101      	movs	r1, #1
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f000 fe5a 	bl	80012e8 <setTimer>

				redlight = default_redlight;
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemFSM+0x590>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a29      	ldr	r2, [pc, #164]	; (80006e0 <SystemFSM+0x594>)
 800063a:	6013      	str	r3, [r2, #0]
				yellowlight = default_yellowlight;
 800063c:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <SystemFSM+0x598>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemFSM+0x57c>)
 8000642:	6013      	str	r3, [r2, #0]
				greenlight = default_greenlight;
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <SystemFSM+0x59c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <SystemFSM+0x5a0>)
 800064a:	6013      	str	r3, [r2, #0]

				// turn off traffic light
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2110      	movs	r1, #16
 8000650:	481c      	ldr	r0, [pc, #112]	; (80006c4 <SystemFSM+0x578>)
 8000652:	f001 fa3e 	bl	8001ad2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	481a      	ldr	r0, [pc, #104]	; (80006c4 <SystemFSM+0x578>)
 800065c:	f001 fa39 	bl	8001ad2 <HAL_GPIO_WritePin>
				button3_press = 0;
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemFSM+0x588>)
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
			}
			// if button1 is pressed, go to next status
			if(is_button_pressed(0)){
 8000666:	2000      	movs	r0, #0
 8000668:	f000 fa54 	bl	8000b14 <is_button_pressed>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <SystemFSM+0x52c>
				button1_press = 1;
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemFSM+0x5a4>)
 8000674:	2201      	movs	r2, #1
 8000676:	601a      	str	r2, [r3, #0]
			}
			if(!is_button_pressed(0) && button1_press){
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fa4b 	bl	8000b14 <is_button_pressed>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d141      	bne.n	8000708 <SystemFSM+0x5bc>
 8000684:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <SystemFSM+0x5a4>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d03d      	beq.n	8000708 <SystemFSM+0x5bc>
				status = MODE1_NORMAL;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemFSM+0x58c>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
				// set timer for traffic light
				setTimer(100, 0);
 8000692:	2100      	movs	r1, #0
 8000694:	2064      	movs	r0, #100	; 0x64
 8000696:	f000 fe27 	bl	80012e8 <setTimer>
				setTimer(100, 1);
 800069a:	2101      	movs	r1, #1
 800069c:	2064      	movs	r0, #100	; 0x64
 800069e:	f000 fe23 	bl	80012e8 <setTimer>
				// turn off traffic light
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <SystemFSM+0x578>)
 80006a8:	f001 fa13 	bl	8001ad2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <SystemFSM+0x578>)
 80006b2:	f001 fa0e 	bl	8001ad2 <HAL_GPIO_WritePin>
				button1_press = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <SystemFSM+0x5a4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
			}
			break;
 80006bc:	e024      	b.n	8000708 <SystemFSM+0x5bc>
 80006be:	bf00      	nop
 80006c0:	200000e8 	.word	0x200000e8
 80006c4:	40010800 	.word	0x40010800
 80006c8:	20000008 	.word	0x20000008
 80006cc:	20000040 	.word	0x20000040
 80006d0:	2000000c 	.word	0x2000000c
 80006d4:	20000044 	.word	0x20000044
 80006d8:	20000048 	.word	0x20000048
 80006dc:	20000064 	.word	0x20000064
 80006e0:	20000000 	.word	0x20000000
 80006e4:	2000006c 	.word	0x2000006c
 80006e8:	20000068 	.word	0x20000068
 80006ec:	20000004 	.word	0x20000004
 80006f0:	2000003c 	.word	0x2000003c
		default:
			break;
 80006f4:	bf00      	nop
 80006f6:	e008      	b.n	800070a <SystemFSM+0x5be>
			break;
 80006f8:	bf00      	nop
 80006fa:	e006      	b.n	800070a <SystemFSM+0x5be>
			break;
 80006fc:	bf00      	nop
 80006fe:	e004      	b.n	800070a <SystemFSM+0x5be>
			break;
 8000700:	bf00      	nop
 8000702:	e002      	b.n	800070a <SystemFSM+0x5be>
			break;
 8000704:	bf00      	nop
 8000706:	e000      	b.n	800070a <SystemFSM+0x5be>
			break;
 8000708:	bf00      	nop
	}
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop

08000710 <TrafficLightFSM1>:
 */


#include "Traffic_Light_FSM.h"

void TrafficLightFSM1(){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	switch(TL1){
 8000714:	4b4f      	ldr	r3, [pc, #316]	; (8000854 <TrafficLightFSM1+0x144>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b02      	cmp	r3, #2
 800071a:	d007      	beq.n	800072c <TrafficLightFSM1+0x1c>
 800071c:	2b02      	cmp	r3, #2
 800071e:	f300 808f 	bgt.w	8000840 <TrafficLightFSM1+0x130>
 8000722:	2b00      	cmp	r3, #0
 8000724:	d030      	beq.n	8000788 <TrafficLightFSM1+0x78>
 8000726:	2b01      	cmp	r3, #1
 8000728:	d05c      	beq.n	80007e4 <TrafficLightFSM1+0xd4>
					Red1 = redlight;
				}
			}
			break;
		default:
			break;
 800072a:	e089      	b.n	8000840 <TrafficLightFSM1+0x130>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	4849      	ldr	r0, [pc, #292]	; (8000858 <TrafficLightFSM1+0x148>)
 8000732:	f001 f9ce 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	4847      	ldr	r0, [pc, #284]	; (8000858 <TrafficLightFSM1+0x148>)
 800073c:	f001 f9c9 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2110      	movs	r1, #16
 8000744:	4844      	ldr	r0, [pc, #272]	; (8000858 <TrafficLightFSM1+0x148>)
 8000746:	f001 f9c4 	bl	8001ad2 <HAL_GPIO_WritePin>
			Updatebuffer(Red1, 1);
 800074a:	4b44      	ldr	r3, [pc, #272]	; (800085c <TrafficLightFSM1+0x14c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2101      	movs	r1, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fd05 	bl	8001160 <Updatebuffer>
			if(flag[0] == 1){
 8000756:	4b42      	ldr	r3, [pc, #264]	; (8000860 <TrafficLightFSM1+0x150>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2b01      	cmp	r3, #1
 800075c:	d172      	bne.n	8000844 <TrafficLightFSM1+0x134>
				setTimer(100, 0);
 800075e:	2100      	movs	r1, #0
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 fdc1 	bl	80012e8 <setTimer>
				Red1--;
 8000766:	4b3d      	ldr	r3, [pc, #244]	; (800085c <TrafficLightFSM1+0x14c>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3b01      	subs	r3, #1
 800076c:	4a3b      	ldr	r2, [pc, #236]	; (800085c <TrafficLightFSM1+0x14c>)
 800076e:	6013      	str	r3, [r2, #0]
				if(Red1 < 0){
 8000770:	4b3a      	ldr	r3, [pc, #232]	; (800085c <TrafficLightFSM1+0x14c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	da65      	bge.n	8000844 <TrafficLightFSM1+0x134>
					TL1 = GREEN;
 8000778:	4b36      	ldr	r3, [pc, #216]	; (8000854 <TrafficLightFSM1+0x144>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
					Green1 = greenlight;
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <TrafficLightFSM1+0x154>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a39      	ldr	r2, [pc, #228]	; (8000868 <TrafficLightFSM1+0x158>)
 8000784:	6013      	str	r3, [r2, #0]
			break;
 8000786:	e05d      	b.n	8000844 <TrafficLightFSM1+0x134>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	4832      	ldr	r0, [pc, #200]	; (8000858 <TrafficLightFSM1+0x148>)
 800078e:	f001 f9a0 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2120      	movs	r1, #32
 8000796:	4830      	ldr	r0, [pc, #192]	; (8000858 <TrafficLightFSM1+0x148>)
 8000798:	f001 f99b 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	482d      	ldr	r0, [pc, #180]	; (8000858 <TrafficLightFSM1+0x148>)
 80007a2:	f001 f996 	bl	8001ad2 <HAL_GPIO_WritePin>
			Updatebuffer(Green1, 1);
 80007a6:	4b30      	ldr	r3, [pc, #192]	; (8000868 <TrafficLightFSM1+0x158>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2101      	movs	r1, #1
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 fcd7 	bl	8001160 <Updatebuffer>
			if(flag[0] == 1){
 80007b2:	4b2b      	ldr	r3, [pc, #172]	; (8000860 <TrafficLightFSM1+0x150>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d146      	bne.n	8000848 <TrafficLightFSM1+0x138>
				setTimer(100, 0);
 80007ba:	2100      	movs	r1, #0
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f000 fd93 	bl	80012e8 <setTimer>
				Green1--;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <TrafficLightFSM1+0x158>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3b01      	subs	r3, #1
 80007c8:	4a27      	ldr	r2, [pc, #156]	; (8000868 <TrafficLightFSM1+0x158>)
 80007ca:	6013      	str	r3, [r2, #0]
				if(Green1 < 0){
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <TrafficLightFSM1+0x158>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	da39      	bge.n	8000848 <TrafficLightFSM1+0x138>
					TL1 = YELLOW;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <TrafficLightFSM1+0x144>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
					Yellow1 = yellowlight;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <TrafficLightFSM1+0x15c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <TrafficLightFSM1+0x160>)
 80007e0:	6013      	str	r3, [r2, #0]
			break;
 80007e2:	e031      	b.n	8000848 <TrafficLightFSM1+0x138>
			HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2140      	movs	r1, #64	; 0x40
 80007e8:	481b      	ldr	r0, [pc, #108]	; (8000858 <TrafficLightFSM1+0x148>)
 80007ea:	f001 f972 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4819      	ldr	r0, [pc, #100]	; (8000858 <TrafficLightFSM1+0x148>)
 80007f4:	f001 f96d 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	4816      	ldr	r0, [pc, #88]	; (8000858 <TrafficLightFSM1+0x148>)
 80007fe:	f001 f968 	bl	8001ad2 <HAL_GPIO_WritePin>
			Updatebuffer(Yellow1, 1);
 8000802:	4b1b      	ldr	r3, [pc, #108]	; (8000870 <TrafficLightFSM1+0x160>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2101      	movs	r1, #1
 8000808:	4618      	mov	r0, r3
 800080a:	f000 fca9 	bl	8001160 <Updatebuffer>
			if(flag[0] == 1){
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <TrafficLightFSM1+0x150>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d11a      	bne.n	800084c <TrafficLightFSM1+0x13c>
				setTimer(100, 0);
 8000816:	2100      	movs	r1, #0
 8000818:	2064      	movs	r0, #100	; 0x64
 800081a:	f000 fd65 	bl	80012e8 <setTimer>
				Yellow1--;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <TrafficLightFSM1+0x160>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3b01      	subs	r3, #1
 8000824:	4a12      	ldr	r2, [pc, #72]	; (8000870 <TrafficLightFSM1+0x160>)
 8000826:	6013      	str	r3, [r2, #0]
				if(Yellow1 < 0){
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <TrafficLightFSM1+0x160>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	da0d      	bge.n	800084c <TrafficLightFSM1+0x13c>
					TL1 = RED;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <TrafficLightFSM1+0x144>)
 8000832:	2202      	movs	r2, #2
 8000834:	601a      	str	r2, [r3, #0]
					Red1 = redlight;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <TrafficLightFSM1+0x164>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <TrafficLightFSM1+0x14c>)
 800083c:	6013      	str	r3, [r2, #0]
			break;
 800083e:	e005      	b.n	800084c <TrafficLightFSM1+0x13c>
			break;
 8000840:	bf00      	nop
 8000842:	e004      	b.n	800084e <TrafficLightFSM1+0x13e>
			break;
 8000844:	bf00      	nop
 8000846:	e002      	b.n	800084e <TrafficLightFSM1+0x13e>
			break;
 8000848:	bf00      	nop
 800084a:	e000      	b.n	800084e <TrafficLightFSM1+0x13e>
			break;
 800084c:	bf00      	nop
	}
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000070 	.word	0x20000070
 8000858:	40010800 	.word	0x40010800
 800085c:	20000088 	.word	0x20000088
 8000860:	200000e8 	.word	0x200000e8
 8000864:	20000004 	.word	0x20000004
 8000868:	20000074 	.word	0x20000074
 800086c:	20000008 	.word	0x20000008
 8000870:	20000084 	.word	0x20000084
 8000874:	20000000 	.word	0x20000000

08000878 <TrafficLightFSM2>:

void TrafficLightFSM2(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	switch(TL2){
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <TrafficLightFSM2+0x150>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d007      	beq.n	8000894 <TrafficLightFSM2+0x1c>
 8000884:	2b02      	cmp	r3, #2
 8000886:	f300 8095 	bgt.w	80009b4 <TrafficLightFSM2+0x13c>
 800088a:	2b00      	cmp	r3, #0
 800088c:	d032      	beq.n	80008f4 <TrafficLightFSM2+0x7c>
 800088e:	2b01      	cmp	r3, #1
 8000890:	d060      	beq.n	8000954 <TrafficLightFSM2+0xdc>
					Red2 = redlight;
				}
			}
			break;
		default:
			break;
 8000892:	e08f      	b.n	80009b4 <TrafficLightFSM2+0x13c>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, RESET);
 8000894:	2200      	movs	r2, #0
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	484c      	ldr	r0, [pc, #304]	; (80009cc <TrafficLightFSM2+0x154>)
 800089c:	f001 f919 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a6:	4849      	ldr	r0, [pc, #292]	; (80009cc <TrafficLightFSM2+0x154>)
 80008a8:	f001 f913 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2180      	movs	r1, #128	; 0x80
 80008b0:	4846      	ldr	r0, [pc, #280]	; (80009cc <TrafficLightFSM2+0x154>)
 80008b2:	f001 f90e 	bl	8001ad2 <HAL_GPIO_WritePin>
			Updatebuffer(Red2, 2);
 80008b6:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <TrafficLightFSM2+0x158>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2102      	movs	r1, #2
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fc4f 	bl	8001160 <Updatebuffer>
			if(flag[1] == 1){
 80008c2:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <TrafficLightFSM2+0x15c>)
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d176      	bne.n	80009b8 <TrafficLightFSM2+0x140>
				setTimer(100, 1);
 80008ca:	2101      	movs	r1, #1
 80008cc:	2064      	movs	r0, #100	; 0x64
 80008ce:	f000 fd0b 	bl	80012e8 <setTimer>
				Red2--;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <TrafficLightFSM2+0x158>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a3d      	ldr	r2, [pc, #244]	; (80009d0 <TrafficLightFSM2+0x158>)
 80008da:	6013      	str	r3, [r2, #0]
				if(Red2 < 0){
 80008dc:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <TrafficLightFSM2+0x158>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	da69      	bge.n	80009b8 <TrafficLightFSM2+0x140>
					TL2 = GREEN;
 80008e4:	4b38      	ldr	r3, [pc, #224]	; (80009c8 <TrafficLightFSM2+0x150>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
					Green2 = greenlight;
 80008ea:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <TrafficLightFSM2+0x160>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4a3b      	ldr	r2, [pc, #236]	; (80009dc <TrafficLightFSM2+0x164>)
 80008f0:	6013      	str	r3, [r2, #0]
			break;
 80008f2:	e061      	b.n	80009b8 <TrafficLightFSM2+0x140>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008fa:	4834      	ldr	r0, [pc, #208]	; (80009cc <TrafficLightFSM2+0x154>)
 80008fc:	f001 f8e9 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	4831      	ldr	r0, [pc, #196]	; (80009cc <TrafficLightFSM2+0x154>)
 8000908:	f001 f8e3 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	482e      	ldr	r0, [pc, #184]	; (80009cc <TrafficLightFSM2+0x154>)
 8000912:	f001 f8de 	bl	8001ad2 <HAL_GPIO_WritePin>
			Updatebuffer(Green2, 2);
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <TrafficLightFSM2+0x164>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2102      	movs	r1, #2
 800091c:	4618      	mov	r0, r3
 800091e:	f000 fc1f 	bl	8001160 <Updatebuffer>
			if(flag[1] == 1){
 8000922:	4b2c      	ldr	r3, [pc, #176]	; (80009d4 <TrafficLightFSM2+0x15c>)
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d148      	bne.n	80009bc <TrafficLightFSM2+0x144>
				setTimer(100, 1);
 800092a:	2101      	movs	r1, #1
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f000 fcdb 	bl	80012e8 <setTimer>
				Green2--;
 8000932:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <TrafficLightFSM2+0x164>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	4a28      	ldr	r2, [pc, #160]	; (80009dc <TrafficLightFSM2+0x164>)
 800093a:	6013      	str	r3, [r2, #0]
				if(Green2 < 0){
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <TrafficLightFSM2+0x164>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	da3b      	bge.n	80009bc <TrafficLightFSM2+0x144>
					TL2 = YELLOW;
 8000944:	4b20      	ldr	r3, [pc, #128]	; (80009c8 <TrafficLightFSM2+0x150>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]
					Yellow2 = yellowlight;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <TrafficLightFSM2+0x168>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a25      	ldr	r2, [pc, #148]	; (80009e4 <TrafficLightFSM2+0x16c>)
 8000950:	6013      	str	r3, [r2, #0]
			break;
 8000952:	e033      	b.n	80009bc <TrafficLightFSM2+0x144>
			HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, SET);
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800095a:	481c      	ldr	r0, [pc, #112]	; (80009cc <TrafficLightFSM2+0x154>)
 800095c:	f001 f8b9 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	4819      	ldr	r0, [pc, #100]	; (80009cc <TrafficLightFSM2+0x154>)
 8000968:	f001 f8b3 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2180      	movs	r1, #128	; 0x80
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <TrafficLightFSM2+0x154>)
 8000972:	f001 f8ae 	bl	8001ad2 <HAL_GPIO_WritePin>
			Updatebuffer(Yellow2, 2);
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <TrafficLightFSM2+0x16c>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2102      	movs	r1, #2
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fbef 	bl	8001160 <Updatebuffer>
			if(flag[1] == 1){
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <TrafficLightFSM2+0x15c>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d11a      	bne.n	80009c0 <TrafficLightFSM2+0x148>
				setTimer(100, 1);
 800098a:	2101      	movs	r1, #1
 800098c:	2064      	movs	r0, #100	; 0x64
 800098e:	f000 fcab 	bl	80012e8 <setTimer>
				Yellow2--;
 8000992:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <TrafficLightFSM2+0x16c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a12      	ldr	r2, [pc, #72]	; (80009e4 <TrafficLightFSM2+0x16c>)
 800099a:	6013      	str	r3, [r2, #0]
				if(Yellow2 < 0){
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <TrafficLightFSM2+0x16c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	da0d      	bge.n	80009c0 <TrafficLightFSM2+0x148>
					TL2 = RED;
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <TrafficLightFSM2+0x150>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	601a      	str	r2, [r3, #0]
					Red2 = redlight;
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <TrafficLightFSM2+0x170>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <TrafficLightFSM2+0x158>)
 80009b0:	6013      	str	r3, [r2, #0]
			break;
 80009b2:	e005      	b.n	80009c0 <TrafficLightFSM2+0x148>
			break;
 80009b4:	bf00      	nop
 80009b6:	e004      	b.n	80009c2 <TrafficLightFSM2+0x14a>
			break;
 80009b8:	bf00      	nop
 80009ba:	e002      	b.n	80009c2 <TrafficLightFSM2+0x14a>
			break;
 80009bc:	bf00      	nop
 80009be:	e000      	b.n	80009c2 <TrafficLightFSM2+0x14a>
			break;
 80009c0:	bf00      	nop
	}
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2000008c 	.word	0x2000008c
 80009cc:	40010800 	.word	0x40010800
 80009d0:	2000007c 	.word	0x2000007c
 80009d4:	200000e8 	.word	0x200000e8
 80009d8:	20000004 	.word	0x20000004
 80009dc:	20000078 	.word	0x20000078
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000080 	.word	0x20000080
 80009e8:	20000000 	.word	0x20000000

080009ec <InitButton>:
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];

static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];


void InitButton(){
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i ++){
 80009f2:	2300      	movs	r3, #0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e00e      	b.n	8000a16 <InitButton+0x2a>
		debounceButtonBuffer1[i] = BUTTON_IS_RELEASED;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <InitButton+0x3c>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	54d1      	strb	r1, [r2, r3]
		debounceButtonBuffer2[i] = BUTTON_IS_RELEASED;
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <InitButton+0x40>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	54d1      	strb	r1, [r2, r3]
		buttonBuffer[i] = BUTTON_IS_RELEASED;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4a09      	ldr	r2, [pc, #36]	; (8000a30 <InitButton+0x44>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	54d1      	strb	r1, [r2, r3]
	for(unsigned char i = 0; i < NO_OF_BUTTONS; i ++){
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	3301      	adds	r3, #1
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d9ed      	bls.n	80009f8 <InitButton+0xc>
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000050 	.word	0x20000050
 8000a2c:	20000054 	.word	0x20000054
 8000a30:	2000004c 	.word	0x2000004c

08000a34 <button_reading>:
void button_reading(unsigned char index){
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	debounceButtonBuffer2[index] = debounceButtonBuffer1[index];
 8000a3e:	79fa      	ldrb	r2, [r7, #7]
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	492e      	ldr	r1, [pc, #184]	; (8000afc <button_reading+0xc8>)
 8000a44:	5c89      	ldrb	r1, [r1, r2]
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <button_reading+0xcc>)
 8000a48:	54d1      	strb	r1, [r2, r3]
	if(index == 0){
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d109      	bne.n	8000a64 <button_reading+0x30>
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000a50:	79fc      	ldrb	r4, [r7, #7]
 8000a52:	2102      	movs	r1, #2
 8000a54:	482b      	ldr	r0, [pc, #172]	; (8000b04 <button_reading+0xd0>)
 8000a56:	f001 f825 	bl	8001aa4 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b27      	ldr	r3, [pc, #156]	; (8000afc <button_reading+0xc8>)
 8000a60:	551a      	strb	r2, [r3, r4]
 8000a62:	e015      	b.n	8000a90 <button_reading+0x5c>
	}
	else if(index == 1){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d109      	bne.n	8000a7e <button_reading+0x4a>
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000a6a:	79fc      	ldrb	r4, [r7, #7]
 8000a6c:	2104      	movs	r1, #4
 8000a6e:	4825      	ldr	r0, [pc, #148]	; (8000b04 <button_reading+0xd0>)
 8000a70:	f001 f818 	bl	8001aa4 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b20      	ldr	r3, [pc, #128]	; (8000afc <button_reading+0xc8>)
 8000a7a:	551a      	strb	r2, [r3, r4]
 8000a7c:	e008      	b.n	8000a90 <button_reading+0x5c>
	}
	else{
		debounceButtonBuffer1[index] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000a7e:	79fc      	ldrb	r4, [r7, #7]
 8000a80:	2108      	movs	r1, #8
 8000a82:	4820      	ldr	r0, [pc, #128]	; (8000b04 <button_reading+0xd0>)
 8000a84:	f001 f80e 	bl	8001aa4 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <button_reading+0xc8>)
 8000a8e:	551a      	strb	r2, [r3, r4]
	}

	if(debounceButtonBuffer1[index] == debounceButtonBuffer2[index]){
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4a1a      	ldr	r2, [pc, #104]	; (8000afc <button_reading+0xc8>)
 8000a94:	5cd2      	ldrb	r2, [r2, r3]
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4919      	ldr	r1, [pc, #100]	; (8000b00 <button_reading+0xcc>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d128      	bne.n	8000af2 <button_reading+0xbe>
		buttonBuffer[index] = debounceButtonBuffer1[index];
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4915      	ldr	r1, [pc, #84]	; (8000afc <button_reading+0xc8>)
 8000aa6:	5c89      	ldrb	r1, [r1, r2]
 8000aa8:	4a17      	ldr	r2, [pc, #92]	; (8000b08 <button_reading+0xd4>)
 8000aaa:	54d1      	strb	r1, [r2, r3]
		if(debounceButtonBuffer1[index] == BUTTON_IS_PRESSED){
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4a13      	ldr	r2, [pc, #76]	; (8000afc <button_reading+0xc8>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d114      	bne.n	8000ae0 <button_reading+0xac>
			if(counterForButtonPress1s[index] < DURATION_FOR_AUTO_INCREASING){
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <button_reading+0xd8>)
 8000aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000abe:	2b63      	cmp	r3, #99	; 0x63
 8000ac0:	d809      	bhi.n	8000ad6 <button_reading+0xa2>
				counterForButtonPress1s[index]++;
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4a11      	ldr	r2, [pc, #68]	; (8000b0c <button_reading+0xd8>)
 8000ac6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000aca:	3201      	adds	r2, #1
 8000acc:	b291      	uxth	r1, r2
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <button_reading+0xd8>)
 8000ad0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		else{
			counterForButtonPress1s[index] = 0;
			flagForButtonPress1s[index] = 0;
		}
	}
}
 8000ad4:	e00d      	b.n	8000af2 <button_reading+0xbe>
				flagForButtonPress1s[index] = 1;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <button_reading+0xdc>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	54d1      	strb	r1, [r2, r3]
}
 8000ade:	e008      	b.n	8000af2 <button_reading+0xbe>
			counterForButtonPress1s[index] = 0;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <button_reading+0xd8>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[index] = 0;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <button_reading+0xdc>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	54d1      	strb	r1, [r2, r3]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000050 	.word	0x20000050
 8000b00:	20000054 	.word	0x20000054
 8000b04:	40010800 	.word	0x40010800
 8000b08:	2000004c 	.word	0x2000004c
 8000b0c:	2000005c 	.word	0x2000005c
 8000b10:	20000058 	.word	0x20000058

08000b14 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index){
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d901      	bls.n	8000b28 <is_button_pressed+0x14>
 8000b24:	2300      	movs	r3, #0
 8000b26:	e007      	b.n	8000b38 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4a06      	ldr	r2, [pc, #24]	; (8000b44 <is_button_pressed+0x30>)
 8000b2c:	5cd3      	ldrb	r3, [r2, r3]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	bf0c      	ite	eq
 8000b32:	2301      	moveq	r3, #1
 8000b34:	2300      	movne	r3, #0
 8000b36:	b2db      	uxtb	r3, r3
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	2000004c 	.word	0x2000004c

08000b48 <is_button_pressed_1s>:

unsigned char is_button_pressed_1s(unsigned char index){
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
	if(index >= NO_OF_BUTTONS) return 0;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d901      	bls.n	8000b5c <is_button_pressed_1s+0x14>
 8000b58:	2300      	movs	r3, #0
 8000b5a:	e007      	b.n	8000b6c <is_button_pressed_1s+0x24>
	return (flagForButtonPress1s[index] == 1);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <is_button_pressed_1s+0x30>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	bf0c      	ite	eq
 8000b66:	2301      	moveq	r3, #1
 8000b68:	2300      	movne	r3, #0
 8000b6a:	b2db      	uxtb	r3, r3
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000058 	.word	0x20000058

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fca6 	bl	80014d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f82e 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 f8b4 	bl	8000cf4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b8c:	f000 f866 	bl	8000c5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <main+0x5c>)
 8000b92:	f001 fbfb 	bl	800238c <HAL_TIM_Base_Start_IT>

  InitButton();
 8000b96:	f7ff ff29 	bl	80009ec <InitButton>
  setTimer(25, 2);
 8000b9a:	2102      	movs	r1, #2
 8000b9c:	2019      	movs	r0, #25
 8000b9e:	f000 fba3 	bl	80012e8 <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SystemFSM();
 8000ba2:	f7ff fad3 	bl	800014c <SystemFSM>
	  if(flag[2] == 1){
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <main+0x60>)
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d1f9      	bne.n	8000ba2 <main+0x26>
		  setTimer(25, 2);
 8000bae:	2102      	movs	r1, #2
 8000bb0:	2019      	movs	r0, #25
 8000bb2:	f000 fb99 	bl	80012e8 <setTimer>
		  Update7SEG(id++);
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <main+0x64>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4908      	ldr	r1, [pc, #32]	; (8000be0 <main+0x64>)
 8000bbe:	600a      	str	r2, [r1, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fb0d 	bl	80011e0 <Update7SEG>
		  if(id >= 4) id = 0;
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <main+0x64>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	dde9      	ble.n	8000ba2 <main+0x26>
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <main+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
	  SystemFSM();
 8000bd4:	e7e5      	b.n	8000ba2 <main+0x26>
 8000bd6:	bf00      	nop
 8000bd8:	20000090 	.word	0x20000090
 8000bdc:	200000e8 	.word	0x200000e8
 8000be0:	20000038 	.word	0x20000038

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b090      	sub	sp, #64	; 0x40
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	2228      	movs	r2, #40	; 0x28
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 ff7a 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c06:	2302      	movs	r3, #2
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0e:	2310      	movs	r3, #16
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 ff8a 	bl	8001b34 <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c26:	f000 f8e7 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 f9f6 	bl	8002034 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c4e:	f000 f8d3 	bl	8000df8 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3740      	adds	r7, #64	; 0x40
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c86:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b19      	ldr	r3, [pc, #100]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c90:	2209      	movs	r2, #9
 8000c92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9a:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000ca2:	f001 fb23 	bl	80022ec <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cac:	f000 f8a4 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	480c      	ldr	r0, [pc, #48]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000cbe:	f001 fca1 	bl	8002604 <HAL_TIM_ConfigClockSource>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cc8:	f000 f896 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_TIM2_Init+0x94>)
 8000cda:	f001 fe79 	bl	80029d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ce4:	f000 f888 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce8:	bf00      	nop
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000090 	.word	0x20000090

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	4b28      	ldr	r3, [pc, #160]	; (8000dac <MX_GPIO_Init+0xb8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a27      	ldr	r2, [pc, #156]	; (8000dac <MX_GPIO_Init+0xb8>)
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <MX_GPIO_Init+0xb8>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	607b      	str	r3, [r7, #4]
 8000d1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_GPIO_Init+0xb8>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <MX_GPIO_Init+0xb8>)
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_GPIO_Init+0xb8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, green1_Pin|yellow1_Pin|red1_Pin|green2_Pin
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000d3e:	481c      	ldr	r0, [pc, #112]	; (8000db0 <MX_GPIO_Init+0xbc>)
 8000d40:	f000 fec7 	bl	8001ad2 <HAL_GPIO_WritePin>
                          |yellow2_Pin|red2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|EN2_Pin|g_Pin
 8000d44:	2200      	movs	r2, #0
 8000d46:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <MX_GPIO_Init+0xc0>)
 8000d4c:	f000 fec1 	bl	8001ad2 <HAL_GPIO_WritePin>
                          |EN3_Pin|a_Pin|b_Pin|c_Pin
                          |d_Pin|e_Pin|f_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8000d50:	230e      	movs	r3, #14
 8000d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0308 	add.w	r3, r7, #8
 8000d60:	4619      	mov	r1, r3
 8000d62:	4813      	ldr	r0, [pc, #76]	; (8000db0 <MX_GPIO_Init+0xbc>)
 8000d64:	f000 fd24 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : green1_Pin yellow1_Pin red1_Pin green2_Pin
                           yellow2_Pin red2_Pin */
  GPIO_InitStruct.Pin = green1_Pin|yellow1_Pin|red1_Pin|green2_Pin
 8000d68:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 8000d6c:	60bb      	str	r3, [r7, #8]
                          |yellow2_Pin|red2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2302      	movs	r3, #2
 8000d78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <MX_GPIO_Init+0xbc>)
 8000d82:	f000 fd15 	bl	80017b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin g_Pin
                           EN3_Pin a_Pin b_Pin c_Pin
                           d_Pin e_Pin f_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|g_Pin
 8000d86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d8a:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin|a_Pin|b_Pin|c_Pin
                          |d_Pin|e_Pin|f_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2302      	movs	r3, #2
 8000d96:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d98:	f107 0308 	add.w	r3, r7, #8
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_GPIO_Init+0xc0>)
 8000da0:	f000 fd06 	bl	80017b0 <HAL_GPIO_Init>

}
 8000da4:	bf00      	nop
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010800 	.word	0x40010800
 8000db4:	40010c00 	.word	0x40010c00

08000db8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	// timer run for traffic light 1
	timer_run(0);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 faa9 	bl	8001318 <timer_run>
	// timer run for traffic light 2
	timer_run(1);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 faa6 	bl	8001318 <timer_run>
	// timer run for quet led
	timer_run(2);
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f000 faa3 	bl	8001318 <timer_run>
	// timer for blinking led 2HZ
	timer_run(3);
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	f000 faa0 	bl	8001318 <timer_run>
	// timer for long press 1s button2
	timer_run(4);
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f000 fa9d 	bl	8001318 <timer_run>
	// read button 1
	button_reading(0);
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fe28 	bl	8000a34 <button_reading>
	// read button 2
	button_reading(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f7ff fe25 	bl	8000a34 <button_reading>
	// read button 3
	button_reading(2);
 8000dea:	2002      	movs	r0, #2
 8000dec:	f7ff fe22 	bl	8000a34 <button_reading>
	// quet led
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <display7SEG>:

#include "output.h"

int buffer7SEG[4];

void display7SEG(int num){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2b09      	cmp	r3, #9
 8000e10:	f200 819e 	bhi.w	8001150 <display7SEG+0x34c>
 8000e14:	a201      	add	r2, pc, #4	; (adr r2, 8000e1c <display7SEG+0x18>)
 8000e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e1a:	bf00      	nop
 8000e1c:	08000e45 	.word	0x08000e45
 8000e20:	08000e93 	.word	0x08000e93
 8000e24:	08000ee1 	.word	0x08000ee1
 8000e28:	08000f2f 	.word	0x08000f2f
 8000e2c:	08000f7d 	.word	0x08000f7d
 8000e30:	08000fcb 	.word	0x08000fcb
 8000e34:	08001019 	.word	0x08001019
 8000e38:	08001067 	.word	0x08001067
 8000e3c:	080010b5 	.word	0x080010b5
 8000e40:	08001103 	.word	0x08001103
	switch(num){
		case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2110      	movs	r1, #16
 8000e48:	48c4      	ldr	r0, [pc, #784]	; (800115c <display7SEG+0x358>)
 8000e4a:	f000 fe42 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2120      	movs	r1, #32
 8000e52:	48c2      	ldr	r0, [pc, #776]	; (800115c <display7SEG+0x358>)
 8000e54:	f000 fe3d 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2140      	movs	r1, #64	; 0x40
 8000e5c:	48bf      	ldr	r0, [pc, #764]	; (800115c <display7SEG+0x358>)
 8000e5e:	f000 fe38 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	48bd      	ldr	r0, [pc, #756]	; (800115c <display7SEG+0x358>)
 8000e68:	f000 fe33 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e72:	48ba      	ldr	r0, [pc, #744]	; (800115c <display7SEG+0x358>)
 8000e74:	f000 fe2d 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	48b7      	ldr	r0, [pc, #732]	; (800115c <display7SEG+0x358>)
 8000e80:	f000 fe27 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e8a:	48b4      	ldr	r0, [pc, #720]	; (800115c <display7SEG+0x358>)
 8000e8c:	f000 fe21 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8000e90:	e15f      	b.n	8001152 <display7SEG+0x34e>
		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	2110      	movs	r1, #16
 8000e96:	48b1      	ldr	r0, [pc, #708]	; (800115c <display7SEG+0x358>)
 8000e98:	f000 fe1b 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2120      	movs	r1, #32
 8000ea0:	48ae      	ldr	r0, [pc, #696]	; (800115c <display7SEG+0x358>)
 8000ea2:	f000 fe16 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2140      	movs	r1, #64	; 0x40
 8000eaa:	48ac      	ldr	r0, [pc, #688]	; (800115c <display7SEG+0x358>)
 8000eac:	f000 fe11 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2180      	movs	r1, #128	; 0x80
 8000eb4:	48a9      	ldr	r0, [pc, #676]	; (800115c <display7SEG+0x358>)
 8000eb6:	f000 fe0c 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ec0:	48a6      	ldr	r0, [pc, #664]	; (800115c <display7SEG+0x358>)
 8000ec2:	f000 fe06 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ecc:	48a3      	ldr	r0, [pc, #652]	; (800115c <display7SEG+0x358>)
 8000ece:	f000 fe00 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ed8:	48a0      	ldr	r0, [pc, #640]	; (800115c <display7SEG+0x358>)
 8000eda:	f000 fdfa 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8000ede:	e138      	b.n	8001152 <display7SEG+0x34e>
		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	489d      	ldr	r0, [pc, #628]	; (800115c <display7SEG+0x358>)
 8000ee6:	f000 fdf4 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2120      	movs	r1, #32
 8000eee:	489b      	ldr	r0, [pc, #620]	; (800115c <display7SEG+0x358>)
 8000ef0:	f000 fdef 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2140      	movs	r1, #64	; 0x40
 8000ef8:	4898      	ldr	r0, [pc, #608]	; (800115c <display7SEG+0x358>)
 8000efa:	f000 fdea 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	4896      	ldr	r0, [pc, #600]	; (800115c <display7SEG+0x358>)
 8000f04:	f000 fde5 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f0e:	4893      	ldr	r0, [pc, #588]	; (800115c <display7SEG+0x358>)
 8000f10:	f000 fddf 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	4890      	ldr	r0, [pc, #576]	; (800115c <display7SEG+0x358>)
 8000f1c:	f000 fdd9 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f26:	488d      	ldr	r0, [pc, #564]	; (800115c <display7SEG+0x358>)
 8000f28:	f000 fdd3 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8000f2c:	e111      	b.n	8001152 <display7SEG+0x34e>
		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2110      	movs	r1, #16
 8000f32:	488a      	ldr	r0, [pc, #552]	; (800115c <display7SEG+0x358>)
 8000f34:	f000 fdcd 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2120      	movs	r1, #32
 8000f3c:	4887      	ldr	r0, [pc, #540]	; (800115c <display7SEG+0x358>)
 8000f3e:	f000 fdc8 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2140      	movs	r1, #64	; 0x40
 8000f46:	4885      	ldr	r0, [pc, #532]	; (800115c <display7SEG+0x358>)
 8000f48:	f000 fdc3 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	4882      	ldr	r0, [pc, #520]	; (800115c <display7SEG+0x358>)
 8000f52:	f000 fdbe 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000f56:	2201      	movs	r2, #1
 8000f58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5c:	487f      	ldr	r0, [pc, #508]	; (800115c <display7SEG+0x358>)
 8000f5e:	f000 fdb8 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f68:	487c      	ldr	r0, [pc, #496]	; (800115c <display7SEG+0x358>)
 8000f6a:	f000 fdb2 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f74:	4879      	ldr	r0, [pc, #484]	; (800115c <display7SEG+0x358>)
 8000f76:	f000 fdac 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8000f7a:	e0ea      	b.n	8001152 <display7SEG+0x34e>
		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	2110      	movs	r1, #16
 8000f80:	4876      	ldr	r0, [pc, #472]	; (800115c <display7SEG+0x358>)
 8000f82:	f000 fda6 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2120      	movs	r1, #32
 8000f8a:	4874      	ldr	r0, [pc, #464]	; (800115c <display7SEG+0x358>)
 8000f8c:	f000 fda1 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	4871      	ldr	r0, [pc, #452]	; (800115c <display7SEG+0x358>)
 8000f96:	f000 fd9c 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	486f      	ldr	r0, [pc, #444]	; (800115c <display7SEG+0x358>)
 8000fa0:	f000 fd97 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	486c      	ldr	r0, [pc, #432]	; (800115c <display7SEG+0x358>)
 8000fac:	f000 fd91 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4869      	ldr	r0, [pc, #420]	; (800115c <display7SEG+0x358>)
 8000fb8:	f000 fd8b 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc2:	4866      	ldr	r0, [pc, #408]	; (800115c <display7SEG+0x358>)
 8000fc4:	f000 fd85 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8000fc8:	e0c3      	b.n	8001152 <display7SEG+0x34e>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2110      	movs	r1, #16
 8000fce:	4863      	ldr	r0, [pc, #396]	; (800115c <display7SEG+0x358>)
 8000fd0:	f000 fd7f 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2120      	movs	r1, #32
 8000fd8:	4860      	ldr	r0, [pc, #384]	; (800115c <display7SEG+0x358>)
 8000fda:	f000 fd7a 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2140      	movs	r1, #64	; 0x40
 8000fe2:	485e      	ldr	r0, [pc, #376]	; (800115c <display7SEG+0x358>)
 8000fe4:	f000 fd75 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	485b      	ldr	r0, [pc, #364]	; (800115c <display7SEG+0x358>)
 8000fee:	f000 fd70 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff8:	4858      	ldr	r0, [pc, #352]	; (800115c <display7SEG+0x358>)
 8000ffa:	f000 fd6a 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001004:	4855      	ldr	r0, [pc, #340]	; (800115c <display7SEG+0x358>)
 8001006:	f000 fd64 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001010:	4852      	ldr	r0, [pc, #328]	; (800115c <display7SEG+0x358>)
 8001012:	f000 fd5e 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8001016:	e09c      	b.n	8001152 <display7SEG+0x34e>
		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001018:	2200      	movs	r2, #0
 800101a:	2110      	movs	r1, #16
 800101c:	484f      	ldr	r0, [pc, #316]	; (800115c <display7SEG+0x358>)
 800101e:	f000 fd58 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2120      	movs	r1, #32
 8001026:	484d      	ldr	r0, [pc, #308]	; (800115c <display7SEG+0x358>)
 8001028:	f000 fd53 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800102c:	2200      	movs	r2, #0
 800102e:	2140      	movs	r1, #64	; 0x40
 8001030:	484a      	ldr	r0, [pc, #296]	; (800115c <display7SEG+0x358>)
 8001032:	f000 fd4e 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001036:	2200      	movs	r2, #0
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	4848      	ldr	r0, [pc, #288]	; (800115c <display7SEG+0x358>)
 800103c:	f000 fd49 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	4845      	ldr	r0, [pc, #276]	; (800115c <display7SEG+0x358>)
 8001048:	f000 fd43 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4842      	ldr	r0, [pc, #264]	; (800115c <display7SEG+0x358>)
 8001054:	f000 fd3d 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105e:	483f      	ldr	r0, [pc, #252]	; (800115c <display7SEG+0x358>)
 8001060:	f000 fd37 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8001064:	e075      	b.n	8001152 <display7SEG+0x34e>
		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001066:	2200      	movs	r2, #0
 8001068:	2110      	movs	r1, #16
 800106a:	483c      	ldr	r0, [pc, #240]	; (800115c <display7SEG+0x358>)
 800106c:	f000 fd31 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2120      	movs	r1, #32
 8001074:	4839      	ldr	r0, [pc, #228]	; (800115c <display7SEG+0x358>)
 8001076:	f000 fd2c 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2140      	movs	r1, #64	; 0x40
 800107e:	4837      	ldr	r0, [pc, #220]	; (800115c <display7SEG+0x358>)
 8001080:	f000 fd27 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8001084:	2201      	movs	r2, #1
 8001086:	2180      	movs	r1, #128	; 0x80
 8001088:	4834      	ldr	r0, [pc, #208]	; (800115c <display7SEG+0x358>)
 800108a:	f000 fd22 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800108e:	2201      	movs	r2, #1
 8001090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001094:	4831      	ldr	r0, [pc, #196]	; (800115c <display7SEG+0x358>)
 8001096:	f000 fd1c 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a0:	482e      	ldr	r0, [pc, #184]	; (800115c <display7SEG+0x358>)
 80010a2:	f000 fd16 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010ac:	482b      	ldr	r0, [pc, #172]	; (800115c <display7SEG+0x358>)
 80010ae:	f000 fd10 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 80010b2:	e04e      	b.n	8001152 <display7SEG+0x34e>
		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	2110      	movs	r1, #16
 80010b8:	4828      	ldr	r0, [pc, #160]	; (800115c <display7SEG+0x358>)
 80010ba:	f000 fd0a 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	4826      	ldr	r0, [pc, #152]	; (800115c <display7SEG+0x358>)
 80010c4:	f000 fd05 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	4823      	ldr	r0, [pc, #140]	; (800115c <display7SEG+0x358>)
 80010ce:	f000 fd00 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2180      	movs	r1, #128	; 0x80
 80010d6:	4821      	ldr	r0, [pc, #132]	; (800115c <display7SEG+0x358>)
 80010d8:	f000 fcfb 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	481e      	ldr	r0, [pc, #120]	; (800115c <display7SEG+0x358>)
 80010e4:	f000 fcf5 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ee:	481b      	ldr	r0, [pc, #108]	; (800115c <display7SEG+0x358>)
 80010f0:	f000 fcef 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80010f4:	2200      	movs	r2, #0
 80010f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <display7SEG+0x358>)
 80010fc:	f000 fce9 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 8001100:	e027      	b.n	8001152 <display7SEG+0x34e>
		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2110      	movs	r1, #16
 8001106:	4815      	ldr	r0, [pc, #84]	; (800115c <display7SEG+0x358>)
 8001108:	f000 fce3 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800110c:	2200      	movs	r2, #0
 800110e:	2120      	movs	r1, #32
 8001110:	4812      	ldr	r0, [pc, #72]	; (800115c <display7SEG+0x358>)
 8001112:	f000 fcde 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	4810      	ldr	r0, [pc, #64]	; (800115c <display7SEG+0x358>)
 800111c:	f000 fcd9 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <display7SEG+0x358>)
 8001126:	f000 fcd4 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <display7SEG+0x358>)
 8001132:	f000 fcce 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4807      	ldr	r0, [pc, #28]	; (800115c <display7SEG+0x358>)
 800113e:	f000 fcc8 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <display7SEG+0x358>)
 800114a:	f000 fcc2 	bl	8001ad2 <HAL_GPIO_WritePin>
			break;
 800114e:	e000      	b.n	8001152 <display7SEG+0x34e>
		default:
			break;
 8001150:	bf00      	nop
	}
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40010c00 	.word	0x40010c00

08001160 <Updatebuffer>:

void Updatebuffer(int time, int light){
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
	if(light == 1){
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d117      	bne.n	80011a0 <Updatebuffer+0x40>
		buffer7SEG[0] = time / 10;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <Updatebuffer+0x78>)
 8001174:	fb82 1203 	smull	r1, r2, r2, r3
 8001178:	1092      	asrs	r2, r2, #2
 800117a:	17db      	asrs	r3, r3, #31
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <Updatebuffer+0x7c>)
 8001180:	6013      	str	r3, [r2, #0]
		buffer7SEG[1] = time % 10;
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <Updatebuffer+0x78>)
 8001186:	fb83 2301 	smull	r2, r3, r3, r1
 800118a:	109a      	asrs	r2, r3, #2
 800118c:	17cb      	asrs	r3, r1, #31
 800118e:	1ad2      	subs	r2, r2, r3
 8001190:	4613      	mov	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	1aca      	subs	r2, r1, r3
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <Updatebuffer+0x7c>)
 800119c:	605a      	str	r2, [r3, #4]
	}
	else{
		buffer7SEG[2] = time / 10;
		buffer7SEG[3] = time % 10;
	}
}
 800119e:	e016      	b.n	80011ce <Updatebuffer+0x6e>
		buffer7SEG[2] = time / 10;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <Updatebuffer+0x78>)
 80011a4:	fb82 1203 	smull	r1, r2, r2, r3
 80011a8:	1092      	asrs	r2, r2, #2
 80011aa:	17db      	asrs	r3, r3, #31
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <Updatebuffer+0x7c>)
 80011b0:	6093      	str	r3, [r2, #8]
		buffer7SEG[3] = time % 10;
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <Updatebuffer+0x78>)
 80011b6:	fb83 2301 	smull	r2, r3, r3, r1
 80011ba:	109a      	asrs	r2, r3, #2
 80011bc:	17cb      	asrs	r3, r1, #31
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	4613      	mov	r3, r2
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	4413      	add	r3, r2
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	1aca      	subs	r2, r1, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <Updatebuffer+0x7c>)
 80011cc:	60da      	str	r2, [r3, #12]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr
 80011d8:	66666667 	.word	0x66666667
 80011dc:	200000d8 	.word	0x200000d8

080011e0 <Update7SEG>:

void Update7SEG(int index){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d872      	bhi.n	80012d4 <Update7SEG+0xf4>
 80011ee:	a201      	add	r2, pc, #4	; (adr r2, 80011f4 <Update7SEG+0x14>)
 80011f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f4:	08001205 	.word	0x08001205
 80011f8:	08001239 	.word	0x08001239
 80011fc:	0800126d 	.word	0x0800126d
 8001200:	080012a1 	.word	0x080012a1
	switch(index){
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2101      	movs	r1, #1
 8001208:	4835      	ldr	r0, [pc, #212]	; (80012e0 <Update7SEG+0x100>)
 800120a:	f000 fc62 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2102      	movs	r1, #2
 8001212:	4833      	ldr	r0, [pc, #204]	; (80012e0 <Update7SEG+0x100>)
 8001214:	f000 fc5d 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2104      	movs	r1, #4
 800121c:	4830      	ldr	r0, [pc, #192]	; (80012e0 <Update7SEG+0x100>)
 800121e:	f000 fc58 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2108      	movs	r1, #8
 8001226:	482e      	ldr	r0, [pc, #184]	; (80012e0 <Update7SEG+0x100>)
 8001228:	f000 fc53 	bl	8001ad2 <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[0]);
 800122c:	4b2d      	ldr	r3, [pc, #180]	; (80012e4 <Update7SEG+0x104>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fde7 	bl	8000e04 <display7SEG>
			break;
 8001236:	e04e      	b.n	80012d6 <Update7SEG+0xf6>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001238:	2201      	movs	r2, #1
 800123a:	2101      	movs	r1, #1
 800123c:	4828      	ldr	r0, [pc, #160]	; (80012e0 <Update7SEG+0x100>)
 800123e:	f000 fc48 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	2102      	movs	r1, #2
 8001246:	4826      	ldr	r0, [pc, #152]	; (80012e0 <Update7SEG+0x100>)
 8001248:	f000 fc43 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2104      	movs	r1, #4
 8001250:	4823      	ldr	r0, [pc, #140]	; (80012e0 <Update7SEG+0x100>)
 8001252:	f000 fc3e 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001256:	2201      	movs	r2, #1
 8001258:	2108      	movs	r1, #8
 800125a:	4821      	ldr	r0, [pc, #132]	; (80012e0 <Update7SEG+0x100>)
 800125c:	f000 fc39 	bl	8001ad2 <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[1]);
 8001260:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <Update7SEG+0x104>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fdcd 	bl	8000e04 <display7SEG>
			break;
 800126a:	e034      	b.n	80012d6 <Update7SEG+0xf6>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800126c:	2201      	movs	r2, #1
 800126e:	2101      	movs	r1, #1
 8001270:	481b      	ldr	r0, [pc, #108]	; (80012e0 <Update7SEG+0x100>)
 8001272:	f000 fc2e 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8001276:	2201      	movs	r2, #1
 8001278:	2102      	movs	r1, #2
 800127a:	4819      	ldr	r0, [pc, #100]	; (80012e0 <Update7SEG+0x100>)
 800127c:	f000 fc29 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2104      	movs	r1, #4
 8001284:	4816      	ldr	r0, [pc, #88]	; (80012e0 <Update7SEG+0x100>)
 8001286:	f000 fc24 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2108      	movs	r1, #8
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <Update7SEG+0x100>)
 8001290:	f000 fc1f 	bl	8001ad2 <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[2]);
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <Update7SEG+0x104>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fdb3 	bl	8000e04 <display7SEG>
			break;
 800129e:	e01a      	b.n	80012d6 <Update7SEG+0xf6>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2101      	movs	r1, #1
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <Update7SEG+0x100>)
 80012a6:	f000 fc14 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2102      	movs	r1, #2
 80012ae:	480c      	ldr	r0, [pc, #48]	; (80012e0 <Update7SEG+0x100>)
 80012b0:	f000 fc0f 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2104      	movs	r1, #4
 80012b8:	4809      	ldr	r0, [pc, #36]	; (80012e0 <Update7SEG+0x100>)
 80012ba:	f000 fc0a 	bl	8001ad2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2108      	movs	r1, #8
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <Update7SEG+0x100>)
 80012c4:	f000 fc05 	bl	8001ad2 <HAL_GPIO_WritePin>
			display7SEG(buffer7SEG[3]);
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <Update7SEG+0x104>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd99 	bl	8000e04 <display7SEG>
			break;
 80012d2:	e000      	b.n	80012d6 <Update7SEG+0xf6>
		default:
			break;
 80012d4:	bf00      	nop
	}
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	200000d8 	.word	0x200000d8

080012e8 <setTimer>:
#include "software_timer.h"

int count[100];
int flag[100];

void setTimer(int duration, int index){
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	flag[index] = 0;
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <setTimer+0x28>)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2100      	movs	r1, #0
 80012f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	count[index] = duration;
 80012fc:	4905      	ldr	r1, [pc, #20]	; (8001314 <setTimer+0x2c>)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	200000e8 	.word	0x200000e8
 8001314:	20000278 	.word	0x20000278

08001318 <timer_run>:

void timer_run(int index){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if(count[index] > 0){
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <timer_run+0x48>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001328:	2b00      	cmp	r3, #0
 800132a:	dd13      	ble.n	8001354 <timer_run+0x3c>
		count[index]--;
 800132c:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <timer_run+0x48>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	1e5a      	subs	r2, r3, #1
 8001336:	490a      	ldr	r1, [pc, #40]	; (8001360 <timer_run+0x48>)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(count[index] <= 0){
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <timer_run+0x48>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	2b00      	cmp	r3, #0
 8001348:	dc04      	bgt.n	8001354 <timer_run+0x3c>
			flag[index] = 1;
 800134a:	4a06      	ldr	r2, [pc, #24]	; (8001364 <timer_run+0x4c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2101      	movs	r1, #1
 8001350:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000278 	.word	0x20000278
 8001364:	200000e8 	.word	0x200000e8

08001368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_MspInit+0x5c>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6193      	str	r3, [r2, #24]
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_MspInit+0x5c>)
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_MspInit+0x5c>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	61d3      	str	r3, [r2, #28]
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <HAL_MspInit+0x5c>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_MspInit+0x60>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <HAL_MspInit+0x60>)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	bc80      	pop	{r7}
 80013c2:	4770      	bx	lr
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000

080013cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013dc:	d113      	bne.n	8001406 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	61d3      	str	r3, [r2, #28]
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_TIM_Base_MspInit+0x44>)
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	201c      	movs	r0, #28
 80013fc:	f000 f9a1 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001400:	201c      	movs	r0, #28
 8001402:	f000 f9ba 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 f87f 	bl	800155c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <TIM2_IRQHandler+0x10>)
 800146a:	f000 ffdb 	bl	8002424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000090 	.word	0x20000090

08001478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001484:	f7ff fff8 	bl	8001478 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001488:	480b      	ldr	r0, [pc, #44]	; (80014b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800148a:	490c      	ldr	r1, [pc, #48]	; (80014bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800148c:	4a0c      	ldr	r2, [pc, #48]	; (80014c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a09      	ldr	r2, [pc, #36]	; (80014c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80014a0:	4c09      	ldr	r4, [pc, #36]	; (80014c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f001 faf9 	bl	8002aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b2:	f7ff fb63 	bl	8000b7c <main>
  bx lr
 80014b6:	4770      	bx	lr
  ldr r0, =_sdata
 80014b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014bc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80014c0:	08002b40 	.word	0x08002b40
  ldr r2, =_sbss
 80014c4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80014c8:	2000040c 	.word	0x2000040c

080014cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014cc:	e7fe      	b.n	80014cc <ADC1_2_IRQHandler>
	...

080014d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_Init+0x28>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_Init+0x28>)
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e0:	2003      	movs	r0, #3
 80014e2:	f000 f923 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e6:	200f      	movs	r0, #15
 80014e8:	f000 f808 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ec:	f7ff ff3c 	bl	8001368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_InitTick+0x54>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x58>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001512:	fbb3 f3f1 	udiv	r3, r3, r1
 8001516:	fbb2 f3f3 	udiv	r3, r2, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f93b 	bl	8001796 <HAL_SYSTICK_Config>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e00e      	b.n	8001548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b0f      	cmp	r3, #15
 800152e:	d80a      	bhi.n	8001546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001530:	2200      	movs	r2, #0
 8001532:	6879      	ldr	r1, [r7, #4]
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f000 f903 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800153c:	4a06      	ldr	r2, [pc, #24]	; (8001558 <HAL_InitTick+0x5c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000010 	.word	0x20000010
 8001554:	20000018 	.word	0x20000018
 8001558:	20000014 	.word	0x20000014

0800155c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_IncTick+0x1c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	461a      	mov	r2, r3
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x20>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4413      	add	r3, r2
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x20>)
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000018 	.word	0x20000018
 800157c:	20000408 	.word	0x20000408

08001580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return uwTick;
 8001584:	4b02      	ldr	r3, [pc, #8]	; (8001590 <HAL_GetTick+0x10>)
 8001586:	681b      	ldr	r3, [r3, #0]
}
 8001588:	4618      	mov	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr
 8001590:	20000408 	.word	0x20000408

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4906      	ldr	r1, [pc, #24]	; (800162c <__NVIC_EnableIRQ+0x34>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff90 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff2d 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff42 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ff90 	bl	8001684 <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff5f 	bl	8001630 <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff35 	bl	80015f8 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff ffa2 	bl	80016e8 <SysTick_Config>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b08b      	sub	sp, #44	; 0x2c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e148      	b.n	8001a56 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017c4:	2201      	movs	r2, #1
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8137 	bne.w	8001a50 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	4aa3      	ldr	r2, [pc, #652]	; (8001a74 <HAL_GPIO_Init+0x2c4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d05e      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 80017ec:	4aa1      	ldr	r2, [pc, #644]	; (8001a74 <HAL_GPIO_Init+0x2c4>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d875      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 80017f2:	4aa1      	ldr	r2, [pc, #644]	; (8001a78 <HAL_GPIO_Init+0x2c8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d058      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 80017f8:	4a9f      	ldr	r2, [pc, #636]	; (8001a78 <HAL_GPIO_Init+0x2c8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d86f      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 80017fe:	4a9f      	ldr	r2, [pc, #636]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d052      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 8001804:	4a9d      	ldr	r2, [pc, #628]	; (8001a7c <HAL_GPIO_Init+0x2cc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d869      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 800180a:	4a9d      	ldr	r2, [pc, #628]	; (8001a80 <HAL_GPIO_Init+0x2d0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d04c      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 8001810:	4a9b      	ldr	r2, [pc, #620]	; (8001a80 <HAL_GPIO_Init+0x2d0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d863      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 8001816:	4a9b      	ldr	r2, [pc, #620]	; (8001a84 <HAL_GPIO_Init+0x2d4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d046      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
 800181c:	4a99      	ldr	r2, [pc, #612]	; (8001a84 <HAL_GPIO_Init+0x2d4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d85d      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 8001822:	2b12      	cmp	r3, #18
 8001824:	d82a      	bhi.n	800187c <HAL_GPIO_Init+0xcc>
 8001826:	2b12      	cmp	r3, #18
 8001828:	d859      	bhi.n	80018de <HAL_GPIO_Init+0x12e>
 800182a:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <HAL_GPIO_Init+0x80>)
 800182c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001830:	080018ab 	.word	0x080018ab
 8001834:	08001885 	.word	0x08001885
 8001838:	08001897 	.word	0x08001897
 800183c:	080018d9 	.word	0x080018d9
 8001840:	080018df 	.word	0x080018df
 8001844:	080018df 	.word	0x080018df
 8001848:	080018df 	.word	0x080018df
 800184c:	080018df 	.word	0x080018df
 8001850:	080018df 	.word	0x080018df
 8001854:	080018df 	.word	0x080018df
 8001858:	080018df 	.word	0x080018df
 800185c:	080018df 	.word	0x080018df
 8001860:	080018df 	.word	0x080018df
 8001864:	080018df 	.word	0x080018df
 8001868:	080018df 	.word	0x080018df
 800186c:	080018df 	.word	0x080018df
 8001870:	080018df 	.word	0x080018df
 8001874:	0800188d 	.word	0x0800188d
 8001878:	080018a1 	.word	0x080018a1
 800187c:	4a82      	ldr	r2, [pc, #520]	; (8001a88 <HAL_GPIO_Init+0x2d8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001882:	e02c      	b.n	80018de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	623b      	str	r3, [r7, #32]
          break;
 800188a:	e029      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	3304      	adds	r3, #4
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e024      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	3308      	adds	r3, #8
 800189c:	623b      	str	r3, [r7, #32]
          break;
 800189e:	e01f      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	330c      	adds	r3, #12
 80018a6:	623b      	str	r3, [r7, #32]
          break;
 80018a8:	e01a      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018b2:	2304      	movs	r3, #4
 80018b4:	623b      	str	r3, [r7, #32]
          break;
 80018b6:	e013      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c0:	2308      	movs	r3, #8
 80018c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	611a      	str	r2, [r3, #16]
          break;
 80018ca:	e009      	b.n	80018e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018cc:	2308      	movs	r3, #8
 80018ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69fa      	ldr	r2, [r7, #28]
 80018d4:	615a      	str	r2, [r3, #20]
          break;
 80018d6:	e003      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e000      	b.n	80018e0 <HAL_GPIO_Init+0x130>
          break;
 80018de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2bff      	cmp	r3, #255	; 0xff
 80018e4:	d801      	bhi.n	80018ea <HAL_GPIO_Init+0x13a>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	e001      	b.n	80018ee <HAL_GPIO_Init+0x13e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3304      	adds	r3, #4
 80018ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2bff      	cmp	r3, #255	; 0xff
 80018f4:	d802      	bhi.n	80018fc <HAL_GPIO_Init+0x14c>
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	e002      	b.n	8001902 <HAL_GPIO_Init+0x152>
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	3b08      	subs	r3, #8
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	210f      	movs	r1, #15
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	fa01 f303 	lsl.w	r3, r1, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	6a39      	ldr	r1, [r7, #32]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	431a      	orrs	r2, r3
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8090 	beq.w	8001a50 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001930:	4b56      	ldr	r3, [pc, #344]	; (8001a8c <HAL_GPIO_Init+0x2dc>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a55      	ldr	r2, [pc, #340]	; (8001a8c <HAL_GPIO_Init+0x2dc>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_GPIO_Init+0x2dc>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001948:	4a51      	ldr	r2, [pc, #324]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	3302      	adds	r3, #2
 8001950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001954:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_GPIO_Init+0x2e4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1e0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a48      	ldr	r2, [pc, #288]	; (8001a98 <HAL_GPIO_Init+0x2e8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1dc>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a47      	ldr	r2, [pc, #284]	; (8001a9c <HAL_GPIO_Init+0x2ec>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1d8>
 8001984:	2302      	movs	r3, #2
 8001986:	e004      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001988:	2303      	movs	r3, #3
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_GPIO_Init+0x1e2>
 8001990:	2300      	movs	r3, #0
 8001992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019a2:	493b      	ldr	r1, [pc, #236]	; (8001a90 <HAL_GPIO_Init+0x2e0>)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d006      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019bc:	4b38      	ldr	r3, [pc, #224]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4937      	ldr	r1, [pc, #220]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	608b      	str	r3, [r1, #8]
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80019ca:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	4933      	ldr	r1, [pc, #204]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d006      	beq.n	80019f2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	492d      	ldr	r1, [pc, #180]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	60cb      	str	r3, [r1, #12]
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	4929      	ldr	r1, [pc, #164]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d006      	beq.n	8001a1a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a0c:	4b24      	ldr	r3, [pc, #144]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4923      	ldr	r1, [pc, #140]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
 8001a18:	e006      	b.n	8001a28 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a1a:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	43db      	mvns	r3, r3
 8001a22:	491f      	ldr	r1, [pc, #124]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a34:	4b1a      	ldr	r3, [pc, #104]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4919      	ldr	r1, [pc, #100]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	600b      	str	r3, [r1, #0]
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a42:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	4915      	ldr	r1, [pc, #84]	; (8001aa0 <HAL_GPIO_Init+0x2f0>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a52:	3301      	adds	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f47f aeaf 	bne.w	80017c4 <HAL_GPIO_Init+0x14>
  }
}
 8001a66:	bf00      	nop
 8001a68:	bf00      	nop
 8001a6a:	372c      	adds	r7, #44	; 0x2c
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bc80      	pop	{r7}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10220000 	.word	0x10220000
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10120000 	.word	0x10120000
 8001a88:	10110000 	.word	0x10110000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	887b      	ldrh	r3, [r7, #2]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	73fb      	strb	r3, [r7, #15]
 8001ac0:	e001      	b.n	8001ac6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
 8001ada:	460b      	mov	r3, r1
 8001adc:	807b      	strh	r3, [r7, #2]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ae2:	787b      	ldrb	r3, [r7, #1]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aee:	e003      	b.n	8001af8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001af0:	887b      	ldrh	r3, [r7, #2]
 8001af2:	041a      	lsls	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b14:	887a      	ldrh	r2, [r7, #2]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4013      	ands	r3, r2
 8001b1a:	041a      	lsls	r2, r3, #16
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43d9      	mvns	r1, r3
 8001b20:	887b      	ldrh	r3, [r7, #2]
 8001b22:	400b      	ands	r3, r1
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e26c      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8087 	beq.w	8001c62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b54:	4b92      	ldr	r3, [pc, #584]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 030c 	and.w	r3, r3, #12
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d00c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b60:	4b8f      	ldr	r3, [pc, #572]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 030c 	and.w	r3, r3, #12
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d112      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
 8001b6c:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b78:	d10b      	bne.n	8001b92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7a:	4b89      	ldr	r3, [pc, #548]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d06c      	beq.n	8001c60 <HAL_RCC_OscConfig+0x12c>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d168      	bne.n	8001c60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e246      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x76>
 8001b9c:	4b80      	ldr	r3, [pc, #512]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7f      	ldr	r2, [pc, #508]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	e02e      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x98>
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7a      	ldr	r2, [pc, #488]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b78      	ldr	r3, [pc, #480]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a77      	ldr	r2, [pc, #476]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01d      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0xbc>
 8001bd6:	4b72      	ldr	r3, [pc, #456]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a71      	ldr	r2, [pc, #452]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b6f      	ldr	r3, [pc, #444]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a6e      	ldr	r2, [pc, #440]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	e00b      	b.n	8001c08 <HAL_RCC_OscConfig+0xd4>
 8001bf0:	4b6b      	ldr	r3, [pc, #428]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a67      	ldr	r2, [pc, #412]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d013      	beq.n	8001c38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcb6 	bl	8001580 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c18:	f7ff fcb2 	bl	8001580 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b64      	cmp	r3, #100	; 0x64
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e1fa      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b5d      	ldr	r3, [pc, #372]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d0f0      	beq.n	8001c18 <HAL_RCC_OscConfig+0xe4>
 8001c36:	e014      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff fca2 	bl	8001580 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fc9e 	bl	8001580 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	; 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e1e6      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c52:	4b53      	ldr	r3, [pc, #332]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x10c>
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d063      	beq.n	8001d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 030c 	and.w	r3, r3, #12
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00b      	beq.n	8001c92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d11c      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d116      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d005      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d001      	beq.n	8001caa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e1ba      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001caa:	4b3d      	ldr	r3, [pc, #244]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4939      	ldr	r1, [pc, #228]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cbe:	e03a      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d020      	beq.n	8001d0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc8:	4b36      	ldr	r3, [pc, #216]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fc57 	bl	8001580 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fc53 	bl	8001580 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e19b      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	695b      	ldr	r3, [r3, #20]
 8001d00:	00db      	lsls	r3, r3, #3
 8001d02:	4927      	ldr	r1, [pc, #156]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e015      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0a:	4b26      	ldr	r3, [pc, #152]	; (8001da4 <HAL_RCC_OscConfig+0x270>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d10:	f7ff fc36 	bl	8001580 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d18:	f7ff fc32 	bl	8001580 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e17a      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d03a      	beq.n	8001db8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d019      	beq.n	8001d7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fc16 	bl	8001580 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7ff fc12 	bl	8001580 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e15a      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f000 fa9a 	bl	80022b0 <RCC_Delay>
 8001d7c:	e01c      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_RCC_OscConfig+0x274>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d84:	f7ff fbfc 	bl	8001580 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d8a:	e00f      	b.n	8001dac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fbf8 	bl	8001580 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d908      	bls.n	8001dac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e140      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000
 8001da4:	42420000 	.word	0x42420000
 8001da8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1e9      	bne.n	8001d8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0304 	and.w	r3, r3, #4
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a6 	beq.w	8001f12 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b97      	ldr	r3, [pc, #604]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10d      	bne.n	8001df2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b94      	ldr	r3, [pc, #592]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4a93      	ldr	r2, [pc, #588]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	61d3      	str	r3, [r2, #28]
 8001de2:	4b91      	ldr	r3, [pc, #580]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b8e      	ldr	r3, [pc, #568]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a8a      	ldr	r2, [pc, #552]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fbb9 	bl	8001580 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7ff fbb5 	bl	8001580 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b64      	cmp	r3, #100	; 0x64
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0fd      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b81      	ldr	r3, [pc, #516]	; (800202c <HAL_RCC_OscConfig+0x4f8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x312>
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a7a      	ldr	r2, [pc, #488]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	e02d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x334>
 8001e4e:	4b76      	ldr	r3, [pc, #472]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	4a75      	ldr	r2, [pc, #468]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6213      	str	r3, [r2, #32]
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4a72      	ldr	r2, [pc, #456]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	e01c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d10c      	bne.n	8001e8a <HAL_RCC_OscConfig+0x356>
 8001e70:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a6c      	ldr	r2, [pc, #432]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6213      	str	r3, [r2, #32]
 8001e7c:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	6213      	str	r3, [r2, #32]
 8001e88:	e00b      	b.n	8001ea2 <HAL_RCC_OscConfig+0x36e>
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	4b64      	ldr	r3, [pc, #400]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	4a63      	ldr	r2, [pc, #396]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	f023 0304 	bic.w	r3, r3, #4
 8001ea0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d015      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff fb69 	bl	8001580 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff fb65 	bl	8001580 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e0ab      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	4b57      	ldr	r3, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0ee      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x37e>
 8001ed4:	e014      	b.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff fb53 	bl	8001580 <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ede:	f7ff fb4f 	bl	8001580 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e095      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	4b4c      	ldr	r3, [pc, #304]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1ee      	bne.n	8001ede <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d105      	bne.n	8001f12 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	4a47      	ldr	r2, [pc, #284]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f10:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 8081 	beq.w	800201e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f1c:	4b42      	ldr	r3, [pc, #264]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	2b08      	cmp	r3, #8
 8001f26:	d061      	beq.n	8001fec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d146      	bne.n	8001fbe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f30:	4b3f      	ldr	r3, [pc, #252]	; (8002030 <HAL_RCC_OscConfig+0x4fc>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff fb23 	bl	8001580 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f3e:	f7ff fb1f 	bl	8001580 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e067      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f50:	4b35      	ldr	r3, [pc, #212]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f0      	bne.n	8001f3e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d108      	bne.n	8001f78 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f66:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a19      	ldr	r1, [r3, #32]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	4927      	ldr	r1, [pc, #156]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	4b27      	ldr	r3, [pc, #156]	; (8002030 <HAL_RCC_OscConfig+0x4fc>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff faf3 	bl	8001580 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9e:	f7ff faef 	bl	8001580 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e037      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x46a>
 8001fbc:	e02f      	b.n	800201e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_RCC_OscConfig+0x4fc>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fadc 	bl	8001580 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fcc:	f7ff fad8 	bl	8001580 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e020      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x498>
 8001fea:	e018      	b.n	800201e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e013      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x4f4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	429a      	cmp	r2, r3
 800200a:	d106      	bne.n	800201a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060

08002034 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0d0      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b6a      	ldr	r3, [pc, #424]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b67      	ldr	r3, [pc, #412]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	4965      	ldr	r1, [pc, #404]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b63      	ldr	r3, [pc, #396]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0b8      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d020      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002090:	4b59      	ldr	r3, [pc, #356]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800209a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a8:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020b4:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	494d      	ldr	r1, [pc, #308]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d040      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020da:	4b47      	ldr	r3, [pc, #284]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d115      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07f      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b41      	ldr	r3, [pc, #260]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e073      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3d      	ldr	r3, [pc, #244]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e06b      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b39      	ldr	r3, [pc, #228]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4936      	ldr	r1, [pc, #216]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7ff fa2c 	bl	8001580 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7ff fa28 	bl	8001580 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e053      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b27      	ldr	r3, [pc, #156]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d210      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b24      	ldr	r3, [pc, #144]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 0207 	bic.w	r2, r3, #7
 800216a:	4922      	ldr	r1, [pc, #136]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	4313      	orrs	r3, r2
 8002170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e032      	b.n	80021ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d008      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4916      	ldr	r1, [pc, #88]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	490e      	ldr	r1, [pc, #56]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021c2:	f000 f821 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	490a      	ldr	r1, [pc, #40]	; (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	fa22 f303 	lsr.w	r3, r2, r3
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_RCC_ClockConfig+0x1cc>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_ClockConfig+0x1d0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff f98a 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40022000 	.word	0x40022000
 80021f8:	40021000 	.word	0x40021000
 80021fc:	08002b14 	.word	0x08002b14
 8002200:	20000010 	.word	0x20000010
 8002204:	20000014 	.word	0x20000014

08002208 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_GetSysClockFreq+0x94>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d002      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x30>
 8002232:	2b08      	cmp	r3, #8
 8002234:	d003      	beq.n	800223e <HAL_RCC_GetSysClockFreq+0x36>
 8002236:	e027      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800223a:	613b      	str	r3, [r7, #16]
      break;
 800223c:	e027      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	0c9b      	lsrs	r3, r3, #18
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a17      	ldr	r2, [pc, #92]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002256:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_GetSysClockFreq+0x94>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	0c5b      	lsrs	r3, r3, #17
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a0d      	ldr	r2, [pc, #52]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800226a:	fb02 f203 	mul.w	r2, r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	fbb2 f3f3 	udiv	r3, r2, r3
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e004      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a0c      	ldr	r2, [pc, #48]	; (80022ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800227c:	fb02 f303 	mul.w	r3, r2, r3
 8002280:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	613b      	str	r3, [r7, #16]
      break;
 8002286:	e002      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800228a:	613b      	str	r3, [r7, #16]
      break;
 800228c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228e:	693b      	ldr	r3, [r7, #16]
}
 8002290:	4618      	mov	r0, r3
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000
 80022a0:	007a1200 	.word	0x007a1200
 80022a4:	08002b24 	.word	0x08002b24
 80022a8:	08002b34 	.word	0x08002b34
 80022ac:	003d0900 	.word	0x003d0900

080022b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <RCC_Delay+0x34>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <RCC_Delay+0x38>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3
 80022c2:	0a5b      	lsrs	r3, r3, #9
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	fb02 f303 	mul.w	r3, r2, r3
 80022ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022cc:	bf00      	nop
  }
  while (Delay --);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	60fa      	str	r2, [r7, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f9      	bne.n	80022cc <RCC_Delay+0x1c>
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr
 80022e4:	20000010 	.word	0x20000010
 80022e8:	10624dd3 	.word	0x10624dd3

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff f85a 	bl	80013cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fa56 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d001      	beq.n	80023a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e035      	b.n	8002410 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2202      	movs	r2, #2
 80023a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a16      	ldr	r2, [pc, #88]	; (800241c <HAL_TIM_Base_Start_IT+0x90>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d009      	beq.n	80023da <HAL_TIM_Base_Start_IT+0x4e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ce:	d004      	beq.n	80023da <HAL_TIM_Base_Start_IT+0x4e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_TIM_Base_Start_IT+0x94>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d111      	bne.n	80023fe <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	d010      	beq.n	800240e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	e007      	b.n	800240e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0201 	orr.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40000400 	.word	0x40000400

08002424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d020      	beq.n	8002488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0202 	mvn.w	r2, #2
 8002458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 f998 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002474:	e005      	b.n	8002482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f98b 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f99a 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b00      	cmp	r3, #0
 8002490:	d020      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d01b      	beq.n	80024d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 0204 	mvn.w	r2, #4
 80024a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f972 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 80024c0:	e005      	b.n	80024ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f965 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f974 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2200      	movs	r2, #0
 80024d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d020      	beq.n	8002520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 0308 	and.w	r3, r3, #8
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01b      	beq.n	8002520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0208 	mvn.w	r2, #8
 80024f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2204      	movs	r2, #4
 80024f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f94c 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 800250c:	e005      	b.n	800251a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f93f 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f94e 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	2b00      	cmp	r3, #0
 8002528:	d020      	beq.n	800256c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01b      	beq.n	800256c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0210 	mvn.w	r2, #16
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2208      	movs	r2, #8
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f926 	bl	80027a4 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f919 	bl	8002792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f928 	bl	80027b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0201 	mvn.w	r2, #1
 8002588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fc14 	bl	8000db8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa6f 	bl	8002a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8f8 	bl	80027c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0320 	and.w	r3, r3, #32
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0220 	mvn.w	r2, #32
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fa42 	bl	8002a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIM_ConfigClockSource+0x1c>
 800261c:	2302      	movs	r3, #2
 800261e:	e0b4      	b.n	800278a <HAL_TIM_ConfigClockSource+0x186>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800263e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002658:	d03e      	beq.n	80026d8 <HAL_TIM_ConfigClockSource+0xd4>
 800265a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800265e:	f200 8087 	bhi.w	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002666:	f000 8086 	beq.w	8002776 <HAL_TIM_ConfigClockSource+0x172>
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	d87f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002670:	2b70      	cmp	r3, #112	; 0x70
 8002672:	d01a      	beq.n	80026aa <HAL_TIM_ConfigClockSource+0xa6>
 8002674:	2b70      	cmp	r3, #112	; 0x70
 8002676:	d87b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002678:	2b60      	cmp	r3, #96	; 0x60
 800267a:	d050      	beq.n	800271e <HAL_TIM_ConfigClockSource+0x11a>
 800267c:	2b60      	cmp	r3, #96	; 0x60
 800267e:	d877      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002680:	2b50      	cmp	r3, #80	; 0x50
 8002682:	d03c      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xfa>
 8002684:	2b50      	cmp	r3, #80	; 0x50
 8002686:	d873      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d058      	beq.n	800273e <HAL_TIM_ConfigClockSource+0x13a>
 800268c:	2b40      	cmp	r3, #64	; 0x40
 800268e:	d86f      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b30      	cmp	r3, #48	; 0x30
 8002692:	d064      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 8002694:	2b30      	cmp	r3, #48	; 0x30
 8002696:	d86b      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b20      	cmp	r3, #32
 800269a:	d060      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 800269c:	2b20      	cmp	r3, #32
 800269e:	d867      	bhi.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d05c      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d05a      	beq.n	800275e <HAL_TIM_ConfigClockSource+0x15a>
 80026a8:	e062      	b.n	8002770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6818      	ldr	r0, [r3, #0]
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	6899      	ldr	r1, [r3, #8]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f000 f96a 	bl	8002992 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	609a      	str	r2, [r3, #8]
      break;
 80026d6:	e04f      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f000 f953 	bl	8002992 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e03c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f000 f8ca 	bl	80028a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2150      	movs	r1, #80	; 0x50
 8002716:	4618      	mov	r0, r3
 8002718:	f000 f921 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 800271c:	e02c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	461a      	mov	r2, r3
 800272c:	f000 f8e8 	bl	8002900 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2160      	movs	r1, #96	; 0x60
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f911 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 800273c:	e01c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6818      	ldr	r0, [r3, #0]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	6859      	ldr	r1, [r3, #4]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	461a      	mov	r2, r3
 800274c:	f000 f8aa 	bl	80028a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2140      	movs	r1, #64	; 0x40
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f901 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 800275c:	e00c      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4619      	mov	r1, r3
 8002768:	4610      	mov	r0, r2
 800276a:	f000 f8f8 	bl	800295e <TIM_ITRx_SetConfig>
      break;
 800276e:	e003      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
      break;
 8002774:	e000      	b.n	8002778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
	...

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a2b      	ldr	r2, [pc, #172]	; (800289c <TIM_Base_SetConfig+0xc0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d007      	beq.n	8002804 <TIM_Base_SetConfig+0x28>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fa:	d003      	beq.n	8002804 <TIM_Base_SetConfig+0x28>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <TIM_Base_SetConfig+0xc4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d108      	bne.n	8002816 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a20      	ldr	r2, [pc, #128]	; (800289c <TIM_Base_SetConfig+0xc0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_Base_SetConfig+0x52>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d003      	beq.n	800282e <TIM_Base_SetConfig+0x52>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <TIM_Base_SetConfig+0xc4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d108      	bne.n	8002840 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a0d      	ldr	r2, [pc, #52]	; (800289c <TIM_Base_SetConfig+0xc0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d103      	bne.n	8002874 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f023 0201 	bic.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	611a      	str	r2, [r3, #16]
  }
}
 8002892:	bf00      	nop
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40000400 	.word	0x40000400

080028a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	f023 0201 	bic.w	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	011b      	lsls	r3, r3, #4
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f023 030a 	bic.w	r3, r3, #10
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	621a      	str	r2, [r3, #32]
}
 80028f6:	bf00      	nop
 80028f8:	371c      	adds	r7, #28
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f023 0210 	bic.w	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800292a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	031b      	lsls	r3, r3, #12
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800293c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4313      	orrs	r3, r2
 8002946:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	621a      	str	r2, [r3, #32]
}
 8002954:	bf00      	nop
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr

0800295e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800295e:	b480      	push	{r7}
 8002960:	b085      	sub	sp, #20
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4313      	orrs	r3, r2
 800297c:	f043 0307 	orr.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002992:	b480      	push	{r7}
 8002994:	b087      	sub	sp, #28
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	609a      	str	r2, [r3, #8]
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d101      	bne.n	80029e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e041      	b.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a14      	ldr	r2, [pc, #80]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d009      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d004      	beq.n	8002a40 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10c      	bne.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40012c00 	.word	0x40012c00
 8002a7c:	40000400 	.word	0x40000400

08002a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <__libc_init_array>:
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	4d0c      	ldr	r5, [pc, #48]	; (8002adc <__libc_init_array+0x38>)
 8002aaa:	4c0d      	ldr	r4, [pc, #52]	; (8002ae0 <__libc_init_array+0x3c>)
 8002aac:	1b64      	subs	r4, r4, r5
 8002aae:	10a4      	asrs	r4, r4, #2
 8002ab0:	42a6      	cmp	r6, r4
 8002ab2:	d109      	bne.n	8002ac8 <__libc_init_array+0x24>
 8002ab4:	f000 f822 	bl	8002afc <_init>
 8002ab8:	2600      	movs	r6, #0
 8002aba:	4d0a      	ldr	r5, [pc, #40]	; (8002ae4 <__libc_init_array+0x40>)
 8002abc:	4c0a      	ldr	r4, [pc, #40]	; (8002ae8 <__libc_init_array+0x44>)
 8002abe:	1b64      	subs	r4, r4, r5
 8002ac0:	10a4      	asrs	r4, r4, #2
 8002ac2:	42a6      	cmp	r6, r4
 8002ac4:	d105      	bne.n	8002ad2 <__libc_init_array+0x2e>
 8002ac6:	bd70      	pop	{r4, r5, r6, pc}
 8002ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002acc:	4798      	blx	r3
 8002ace:	3601      	adds	r6, #1
 8002ad0:	e7ee      	b.n	8002ab0 <__libc_init_array+0xc>
 8002ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad6:	4798      	blx	r3
 8002ad8:	3601      	adds	r6, #1
 8002ada:	e7f2      	b.n	8002ac2 <__libc_init_array+0x1e>
 8002adc:	08002b38 	.word	0x08002b38
 8002ae0:	08002b38 	.word	0x08002b38
 8002ae4:	08002b38 	.word	0x08002b38
 8002ae8:	08002b3c 	.word	0x08002b3c

08002aec <memset>:
 8002aec:	4603      	mov	r3, r0
 8002aee:	4402      	add	r2, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <_init>:
 8002afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002afe:	bf00      	nop
 8002b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b02:	bc08      	pop	{r3}
 8002b04:	469e      	mov	lr, r3
 8002b06:	4770      	bx	lr

08002b08 <_fini>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr
